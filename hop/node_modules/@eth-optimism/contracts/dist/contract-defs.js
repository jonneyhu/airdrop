"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadContractFromManager = exports.loadContract = exports.getContractFactory = exports.getContractInterface = exports.getContractDefinition = void 0;
const ethers_1 = require("ethers");
const getContractDefinition = (name) => {
    const { getContractArtifact } = require('./contract-artifacts');
    const artifact = getContractArtifact(name);
    if (artifact === undefined) {
        throw new Error(`Unable to find artifact for contract: ${name}`);
    }
    return artifact;
};
exports.getContractDefinition = getContractDefinition;
const getContractInterface = (name) => {
    const definition = exports.getContractDefinition(name);
    return new ethers_1.ethers.utils.Interface(definition.abi);
};
exports.getContractInterface = getContractInterface;
const getContractFactory = (name, signer) => {
    const definition = exports.getContractDefinition(name);
    const contractInterface = exports.getContractInterface(name);
    return new ethers_1.ethers.ContractFactory(contractInterface, definition.bytecode, signer);
};
exports.getContractFactory = getContractFactory;
const loadContract = (name, address, provider) => {
    return new ethers_1.ethers.Contract(address, exports.getContractInterface(name), provider);
};
exports.loadContract = loadContract;
const loadContractFromManager = async (args) => {
    const { name, proxy, Lib_AddressManager, provider } = args;
    const address = await Lib_AddressManager.getAddress(proxy ? proxy : name);
    if (address === ethers_1.ethers.constants.AddressZero) {
        throw new Error(`Lib_AddressManager does not have a record for a contract named: ${name}`);
    }
    return exports.loadContract(name, address, provider);
};
exports.loadContractFromManager = loadContractFromManager;
//# sourceMappingURL=contract-defs.js.map