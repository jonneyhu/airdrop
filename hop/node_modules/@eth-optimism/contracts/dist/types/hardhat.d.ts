/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IL1ChugSplashDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1ChugSplashDeployer__factory>;
    getContractFactory(
      name: "L1ChugSplashProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1ChugSplashProxy__factory>;
    getContractFactory(
      name: "AddressDictator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressDictator__factory>;
    getContractFactory(
      name: "ChugSplashDictator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChugSplashDictator__factory>;
    getContractFactory(
      name: "IL1CrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1CrossDomainMessenger__factory>;
    getContractFactory(
      name: "IL1ERC20Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1ERC20Bridge__factory>;
    getContractFactory(
      name: "IL1StandardBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1StandardBridge__factory>;
    getContractFactory(
      name: "L1CrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1CrossDomainMessenger__factory>;
    getContractFactory(
      name: "L1StandardBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1StandardBridge__factory>;
    getContractFactory(
      name: "CanonicalTransactionChain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CanonicalTransactionChain__factory>;
    getContractFactory(
      name: "ChainStorageContainer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainStorageContainer__factory>;
    getContractFactory(
      name: "ICanonicalTransactionChain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICanonicalTransactionChain__factory>;
    getContractFactory(
      name: "IChainStorageContainer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainStorageContainer__factory>;
    getContractFactory(
      name: "IStateCommitmentChain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStateCommitmentChain__factory>;
    getContractFactory(
      name: "StateCommitmentChain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StateCommitmentChain__factory>;
    getContractFactory(
      name: "BondManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BondManager__factory>;
    getContractFactory(
      name: "IBondManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBondManager__factory>;
    getContractFactory(
      name: "IL2CrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2CrossDomainMessenger__factory>;
    getContractFactory(
      name: "IL2ERC20Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2ERC20Bridge__factory>;
    getContractFactory(
      name: "L2CrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2CrossDomainMessenger__factory>;
    getContractFactory(
      name: "L2StandardBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2StandardBridge__factory>;
    getContractFactory(
      name: "L2StandardTokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2StandardTokenFactory__factory>;
    getContractFactory(
      name: "IOVML1BlockNumber",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOVML1BlockNumber__factory>;
    getContractFactory(
      name: "IOVML2ToL1MessagePasser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOVML2ToL1MessagePasser__factory>;
    getContractFactory(
      name: "OVMDeployerWhitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OVMDeployerWhitelist__factory>;
    getContractFactory(
      name: "OVMETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OVMETH__factory>;
    getContractFactory(
      name: "OVMGasPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OVMGasPriceOracle__factory>;
    getContractFactory(
      name: "OVML2ToL1MessagePasser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OVML2ToL1MessagePasser__factory>;
    getContractFactory(
      name: "OVMSequencerFeeVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OVMSequencerFeeVault__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: "CrossDomainEnabled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossDomainEnabled__factory>;
    getContractFactory(
      name: "ICrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrossDomainMessenger__factory>;
    getContractFactory(
      name: "LibAddressManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibAddressManager__factory>;
    getContractFactory(
      name: "LibAddressResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibAddressResolver__factory>;
    getContractFactory(
      name: "LibResolvedDelegateProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibResolvedDelegateProxy__factory>;
    getContractFactory(
      name: "IL2StandardERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2StandardERC20__factory>;
    getContractFactory(
      name: "L2StandardERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2StandardERC20__factory>;
    getContractFactory(
      name: "HelperGasMeasurer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HelperGasMeasurer__factory>;
    getContractFactory(
      name: "HelperSimpleProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HelperSimpleProxy__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "TestLibOVMCodec",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibOVMCodec__factory>;
    getContractFactory(
      name: "TestLibRLPReader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibRLPReader__factory>;
    getContractFactory(
      name: "TestLibRLPWriter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibRLPWriter__factory>;
    getContractFactory(
      name: "TestLibAddressAliasHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibAddressAliasHelper__factory>;
    getContractFactory(
      name: "TestLibMerkleTrie",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibMerkleTrie__factory>;
    getContractFactory(
      name: "TestLibSecureMerkleTrie",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibSecureMerkleTrie__factory>;
    getContractFactory(
      name: "TestLibBuffer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibBuffer__factory>;
    getContractFactory(
      name: "TestLibBytes32Utils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibBytes32Utils__factory>;
    getContractFactory(
      name: "TestLibBytesUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibBytesUtils__factory>;
    getContractFactory(
      name: "TestLibMerkleTree",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLibMerkleTree__factory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
  }
}
