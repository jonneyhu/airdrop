/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CanonicalTransactionChainInterface extends ethers.utils.Interface {
  functions: {
    "MAX_ROLLUP_TX_SIZE()": FunctionFragment;
    "MIN_ROLLUP_TX_GAS()": FunctionFragment;
    "appendSequencerBatch()": FunctionFragment;
    "batches()": FunctionFragment;
    "enqueue(address,uint256,bytes)": FunctionFragment;
    "enqueueGasCost()": FunctionFragment;
    "enqueueL2GasPrepaid()": FunctionFragment;
    "getLastBlockNumber()": FunctionFragment;
    "getLastTimestamp()": FunctionFragment;
    "getNextQueueIndex()": FunctionFragment;
    "getNumPendingQueueElements()": FunctionFragment;
    "getQueueElement(uint256)": FunctionFragment;
    "getQueueLength()": FunctionFragment;
    "getTotalBatches()": FunctionFragment;
    "getTotalElements()": FunctionFragment;
    "l2GasDiscountDivisor()": FunctionFragment;
    "libAddressManager()": FunctionFragment;
    "maxTransactionGasLimit()": FunctionFragment;
    "resolve(string)": FunctionFragment;
    "setGasParams(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_ROLLUP_TX_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_ROLLUP_TX_GAS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "appendSequencerBatch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "batches", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enqueue",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enqueueGasCost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enqueueL2GasPrepaid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextQueueIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumPendingQueueElements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQueueElement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQueueLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBatches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalElements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2GasDiscountDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "libAddressManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTransactionGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resolve", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setGasParams",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_ROLLUP_TX_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_ROLLUP_TX_GAS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "appendSequencerBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enqueue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enqueueGasCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enqueueL2GasPrepaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextQueueIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumPendingQueueElements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQueueElement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQueueLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalElements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2GasDiscountDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "libAddressManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTransactionGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGasParams",
    data: BytesLike
  ): Result;

  events: {
    "L2GasParamsUpdated(uint256,uint256,uint256)": EventFragment;
    "QueueBatchAppended(uint256,uint256,uint256)": EventFragment;
    "SequencerBatchAppended(uint256,uint256,uint256)": EventFragment;
    "TransactionBatchAppended(uint256,bytes32,uint256,uint256,bytes)": EventFragment;
    "TransactionEnqueued(address,address,uint256,bytes,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "L2GasParamsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QueueBatchAppended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SequencerBatchAppended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionBatchAppended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionEnqueued"): EventFragment;
}

export class CanonicalTransactionChain extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CanonicalTransactionChainInterface;

  functions: {
    MAX_ROLLUP_TX_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_ROLLUP_TX_GAS(overrides?: CallOverrides): Promise<[BigNumber]>;

    appendSequencerBatch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batches(overrides?: CallOverrides): Promise<[string]>;

    enqueue(
      _target: string,
      _gasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enqueueGasCost(overrides?: CallOverrides): Promise<[BigNumber]>;

    enqueueL2GasPrepaid(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastBlockNumber(overrides?: CallOverrides): Promise<[number]>;

    getLastTimestamp(overrides?: CallOverrides): Promise<[number]>;

    getNextQueueIndex(overrides?: CallOverrides): Promise<[number]>;

    getNumPendingQueueElements(overrides?: CallOverrides): Promise<[number]>;

    getQueueElement(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number, number] & {
          transactionHash: string;
          timestamp: number;
          blockNumber: number;
        }
      ] & {
        _element: [string, number, number] & {
          transactionHash: string;
          timestamp: number;
          blockNumber: number;
        };
      }
    >;

    getQueueLength(overrides?: CallOverrides): Promise<[number]>;

    getTotalBatches(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _totalBatches: BigNumber }>;

    getTotalElements(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _totalElements: BigNumber }>;

    l2GasDiscountDivisor(overrides?: CallOverrides): Promise<[BigNumber]>;

    libAddressManager(overrides?: CallOverrides): Promise<[string]>;

    maxTransactionGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    resolve(_name: string, overrides?: CallOverrides): Promise<[string]>;

    setGasParams(
      _l2GasDiscountDivisor: BigNumberish,
      _enqueueGasCost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_ROLLUP_TX_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_ROLLUP_TX_GAS(overrides?: CallOverrides): Promise<BigNumber>;

  appendSequencerBatch(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batches(overrides?: CallOverrides): Promise<string>;

  enqueue(
    _target: string,
    _gasLimit: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enqueueGasCost(overrides?: CallOverrides): Promise<BigNumber>;

  enqueueL2GasPrepaid(overrides?: CallOverrides): Promise<BigNumber>;

  getLastBlockNumber(overrides?: CallOverrides): Promise<number>;

  getLastTimestamp(overrides?: CallOverrides): Promise<number>;

  getNextQueueIndex(overrides?: CallOverrides): Promise<number>;

  getNumPendingQueueElements(overrides?: CallOverrides): Promise<number>;

  getQueueElement(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number] & {
      transactionHash: string;
      timestamp: number;
      blockNumber: number;
    }
  >;

  getQueueLength(overrides?: CallOverrides): Promise<number>;

  getTotalBatches(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalElements(overrides?: CallOverrides): Promise<BigNumber>;

  l2GasDiscountDivisor(overrides?: CallOverrides): Promise<BigNumber>;

  libAddressManager(overrides?: CallOverrides): Promise<string>;

  maxTransactionGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  resolve(_name: string, overrides?: CallOverrides): Promise<string>;

  setGasParams(
    _l2GasDiscountDivisor: BigNumberish,
    _enqueueGasCost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_ROLLUP_TX_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_ROLLUP_TX_GAS(overrides?: CallOverrides): Promise<BigNumber>;

    appendSequencerBatch(overrides?: CallOverrides): Promise<void>;

    batches(overrides?: CallOverrides): Promise<string>;

    enqueue(
      _target: string,
      _gasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    enqueueGasCost(overrides?: CallOverrides): Promise<BigNumber>;

    enqueueL2GasPrepaid(overrides?: CallOverrides): Promise<BigNumber>;

    getLastBlockNumber(overrides?: CallOverrides): Promise<number>;

    getLastTimestamp(overrides?: CallOverrides): Promise<number>;

    getNextQueueIndex(overrides?: CallOverrides): Promise<number>;

    getNumPendingQueueElements(overrides?: CallOverrides): Promise<number>;

    getQueueElement(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        transactionHash: string;
        timestamp: number;
        blockNumber: number;
      }
    >;

    getQueueLength(overrides?: CallOverrides): Promise<number>;

    getTotalBatches(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalElements(overrides?: CallOverrides): Promise<BigNumber>;

    l2GasDiscountDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    libAddressManager(overrides?: CallOverrides): Promise<string>;

    maxTransactionGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    resolve(_name: string, overrides?: CallOverrides): Promise<string>;

    setGasParams(
      _l2GasDiscountDivisor: BigNumberish,
      _enqueueGasCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    L2GasParamsUpdated(
      l2GasDiscountDivisor?: null,
      enqueueGasCost?: null,
      enqueueL2GasPrepaid?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        l2GasDiscountDivisor: BigNumber;
        enqueueGasCost: BigNumber;
        enqueueL2GasPrepaid: BigNumber;
      }
    >;

    QueueBatchAppended(
      _startingQueueIndex?: null,
      _numQueueElements?: null,
      _totalElements?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        _startingQueueIndex: BigNumber;
        _numQueueElements: BigNumber;
        _totalElements: BigNumber;
      }
    >;

    SequencerBatchAppended(
      _startingQueueIndex?: null,
      _numQueueElements?: null,
      _totalElements?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        _startingQueueIndex: BigNumber;
        _numQueueElements: BigNumber;
        _totalElements: BigNumber;
      }
    >;

    TransactionBatchAppended(
      _batchIndex?: BigNumberish | null,
      _batchRoot?: null,
      _batchSize?: null,
      _prevTotalElements?: null,
      _extraData?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, string],
      {
        _batchIndex: BigNumber;
        _batchRoot: string;
        _batchSize: BigNumber;
        _prevTotalElements: BigNumber;
        _extraData: string;
      }
    >;

    TransactionEnqueued(
      _l1TxOrigin?: string | null,
      _target?: string | null,
      _gasLimit?: null,
      _data?: null,
      _queueIndex?: BigNumberish | null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber, BigNumber],
      {
        _l1TxOrigin: string;
        _target: string;
        _gasLimit: BigNumber;
        _data: string;
        _queueIndex: BigNumber;
        _timestamp: BigNumber;
      }
    >;
  };

  estimateGas: {
    MAX_ROLLUP_TX_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_ROLLUP_TX_GAS(overrides?: CallOverrides): Promise<BigNumber>;

    appendSequencerBatch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batches(overrides?: CallOverrides): Promise<BigNumber>;

    enqueue(
      _target: string,
      _gasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enqueueGasCost(overrides?: CallOverrides): Promise<BigNumber>;

    enqueueL2GasPrepaid(overrides?: CallOverrides): Promise<BigNumber>;

    getLastBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getLastTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getNextQueueIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getNumPendingQueueElements(overrides?: CallOverrides): Promise<BigNumber>;

    getQueueElement(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQueueLength(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBatches(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalElements(overrides?: CallOverrides): Promise<BigNumber>;

    l2GasDiscountDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    libAddressManager(overrides?: CallOverrides): Promise<BigNumber>;

    maxTransactionGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    resolve(_name: string, overrides?: CallOverrides): Promise<BigNumber>;

    setGasParams(
      _l2GasDiscountDivisor: BigNumberish,
      _enqueueGasCost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_ROLLUP_TX_SIZE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_ROLLUP_TX_GAS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    appendSequencerBatch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batches(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enqueue(
      _target: string,
      _gasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enqueueGasCost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enqueueL2GasPrepaid(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextQueueIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumPendingQueueElements(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQueueElement(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQueueLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalBatches(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalElements(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2GasDiscountDivisor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    libAddressManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTransactionGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolve(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setGasParams(
      _l2GasDiscountDivisor: BigNumberish,
      _enqueueGasCost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
