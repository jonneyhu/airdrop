/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IL2ERC20BridgeInterface extends ethers.utils.Interface {
  functions: {
    "finalizeDeposit(address,address,address,address,uint256,bytes)": FunctionFragment;
    "l1TokenBridge()": FunctionFragment;
    "withdraw(address,uint256,uint32,bytes)": FunctionFragment;
    "withdrawTo(address,address,uint256,uint32,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "finalizeDeposit",
    values: [string, string, string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "l1TokenBridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "finalizeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1TokenBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;

  events: {
    "DepositFailed(address,address,address,address,uint256,bytes)": EventFragment;
    "DepositFinalized(address,address,address,address,uint256,bytes)": EventFragment;
    "WithdrawalInitiated(address,address,address,address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalInitiated"): EventFragment;
}

export class IL2ERC20Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IL2ERC20BridgeInterface;

  functions: {
    finalizeDeposit(
      _l1Token: string,
      _l2Token: string,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    l1TokenBridge(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _l2Token: string,
      _amount: BigNumberish,
      _l1Gas: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTo(
      _l2Token: string,
      _to: string,
      _amount: BigNumberish,
      _l1Gas: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  finalizeDeposit(
    _l1Token: string,
    _l2Token: string,
    _from: string,
    _to: string,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  l1TokenBridge(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _l2Token: string,
    _amount: BigNumberish,
    _l1Gas: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTo(
    _l2Token: string,
    _to: string,
    _amount: BigNumberish,
    _l1Gas: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    finalizeDeposit(
      _l1Token: string,
      _l2Token: string,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    l1TokenBridge(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _l2Token: string,
      _amount: BigNumberish,
      _l1Gas: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTo(
      _l2Token: string,
      _to: string,
      _amount: BigNumberish,
      _l1Gas: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    DepositFailed(
      _l1Token?: string | null,
      _l2Token?: string | null,
      _from?: string | null,
      _to?: null,
      _amount?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        _l1Token: string;
        _l2Token: string;
        _from: string;
        _to: string;
        _amount: BigNumber;
        _data: string;
      }
    >;

    DepositFinalized(
      _l1Token?: string | null,
      _l2Token?: string | null,
      _from?: string | null,
      _to?: null,
      _amount?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        _l1Token: string;
        _l2Token: string;
        _from: string;
        _to: string;
        _amount: BigNumber;
        _data: string;
      }
    >;

    WithdrawalInitiated(
      _l1Token?: string | null,
      _l2Token?: string | null,
      _from?: string | null,
      _to?: null,
      _amount?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        _l1Token: string;
        _l2Token: string;
        _from: string;
        _to: string;
        _amount: BigNumber;
        _data: string;
      }
    >;
  };

  estimateGas: {
    finalizeDeposit(
      _l1Token: string,
      _l2Token: string,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    l1TokenBridge(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _l2Token: string,
      _amount: BigNumberish,
      _l1Gas: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTo(
      _l2Token: string,
      _to: string,
      _amount: BigNumberish,
      _l1Gas: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    finalizeDeposit(
      _l1Token: string,
      _l2Token: string,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    l1TokenBridge(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _l2Token: string,
      _amount: BigNumberish,
      _l1Gas: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTo(
      _l2Token: string,
      _to: string,
      _amount: BigNumberish,
      _l1Gas: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
