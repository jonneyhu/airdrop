"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.undoL1ToL2Alias = exports.applyL1ToL2Alias = exports.bnToAddress = exports.L1_TO_L2_ALIAS_OFFSET = void 0;
const ethers_1 = require("ethers");
exports.L1_TO_L2_ALIAS_OFFSET = '0x1111000000000000000000000000000000001111';
const bnToAddress = (bn) => {
    bn = ethers_1.ethers.BigNumber.from(bn);
    if (bn.isNegative()) {
        bn = ethers_1.ethers.BigNumber.from('0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')
            .add(bn)
            .add(1);
    }
    const addr = bn.toHexString().slice(2).padStart(40, '0');
    return ethers_1.ethers.utils.getAddress('0x' + addr.slice(addr.length - 40, addr.length));
};
exports.bnToAddress = bnToAddress;
const applyL1ToL2Alias = (address) => {
    if (!ethers_1.ethers.utils.isAddress(address)) {
        throw new Error(`not a valid address: ${address}`);
    }
    return exports.bnToAddress(ethers_1.ethers.BigNumber.from(address).add(exports.L1_TO_L2_ALIAS_OFFSET));
};
exports.applyL1ToL2Alias = applyL1ToL2Alias;
const undoL1ToL2Alias = (address) => {
    if (!ethers_1.ethers.utils.isAddress(address)) {
        throw new Error(`not a valid address: ${address}`);
    }
    return exports.bnToAddress(ethers_1.ethers.BigNumber.from(address).sub(exports.L1_TO_L2_ALIAS_OFFSET));
};
exports.undoL1ToL2Alias = undoL1ToL2Alias;
//# sourceMappingURL=alias.js.map