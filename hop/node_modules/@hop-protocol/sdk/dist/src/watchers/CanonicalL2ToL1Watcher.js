"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const CanonicalBridge_1 = __importDefault(require("../CanonicalBridge"));
const ERC20_json_1 = __importDefault(require("@hop-protocol/core/abi/generated/ERC20.json"));
const BaseWatcher_1 = __importDefault(require("./BaseWatcher"));
const models_1 = require("../models");
const ethers_1 = require("ethers");
const eventTopics_1 = require("../constants/eventTopics");
class L1ToL2Watcher extends BaseWatcher_1.default {
    watch() {
        this.start().catch((err) => this.ee.emit('error', err));
        return this.ee;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.startBase();
            return this.poll(yield this.pollFn());
        });
    }
    pollFn() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.sourceChain.equals(models_1.Chain.xDai)) {
                return this.xDaiWatcher();
            }
            else if (this.sourceChain.equals(models_1.Chain.Polygon)) {
                return this.polygonWatcher();
            }
            else {
                throw new Error('not implemented');
            }
        });
    }
    xDaiWatcher() {
        return __awaiter(this, void 0, void 0, function* () {
            let startBlock = -1;
            let endBlock = -1;
            const canonicalBridge = new CanonicalBridge_1.default(this.network, this.signer, this.token, models_1.Chain.xDai);
            const ambBridge = yield canonicalBridge.getAmbBridge(models_1.Chain.Ethereum);
            const filter = {
                address: canonicalBridge.getL1CanonicalTokenAddress(this.token, models_1.Chain.xDai)
            };
            const handleEvent = (...args) => __awaiter(this, void 0, void 0, function* () {
                const event = args[args.length - 1];
                const receipt = yield event.getTransactionReceipt();
                for (const i in receipt.logs) {
                    if (receipt.logs[i].topics[0] === eventTopics_1.tokensBridgedTopic) {
                        if (receipt.logs[i].topics[2].includes(this.sourceTx.from.toLowerCase().replace('0x', ''))) {
                            const destTx = yield event.getTransaction();
                            if (yield this.emitDestTxEvent(destTx)) {
                                ambBridge.off(filter, handleEvent);
                                return true;
                            }
                        }
                    }
                }
                return false;
            });
            ambBridge.on(filter, handleEvent);
            return () => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const blockNumber = yield this.destinationChain.provider.getBlockNumber();
                if (!blockNumber) {
                    return false;
                }
                if (startBlock === -1) {
                    startBlock = endBlock - 1000;
                }
                else {
                    startBlock = endBlock;
                }
                endBlock = blockNumber;
                const events = ((_a = (yield ambBridge.queryFilter(filter, startBlock, endBlock))) !== null && _a !== void 0 ? _a : []).reverse();
                if (!events || !events.length) {
                    return false;
                }
                for (const event of events) {
                    if (yield handleEvent(event)) {
                        return true;
                    }
                }
                return false;
            });
        });
    }
    polygonWatcher() {
        return __awaiter(this, void 0, void 0, function* () {
            let startBlock = -1;
            let endBlock = -1;
            const tokenAddress = this.getL1CanonicalTokenAddress(this.token, models_1.Chain.Ethereum);
            const contract = new ethers_1.Contract(tokenAddress, ERC20_json_1.default, yield this.getSignerOrProvider(models_1.Chain.Ethereum));
            const filter = {
                topics: []
            };
            const handleEvent = (...args) => __awaiter(this, void 0, void 0, function* () {
                const event = args[args.length - 1];
                const receipt = yield event.getTransactionReceipt();
                for (const i in receipt.logs) {
                    if (receipt.logs[i].topics[0] === eventTopics_1.tokenTransferTopic) {
                        if (receipt.logs[i].topics[2].includes(this.sourceTx.from.toLowerCase().replace('0x', ''))) {
                            if (!receipt.logs[i].topics[1].includes(this.getL1PosErc20PredicateAddress(this.token, models_1.Chain.Polygon)
                                .toLowerCase()
                                .replace('0x', ''))) {
                                continue;
                            }
                            const destTx = yield event.getTransaction();
                            if (yield this.emitDestTxEvent(destTx)) {
                                contract.off(filter, handleEvent);
                                return true;
                            }
                        }
                    }
                }
                return false;
            });
            contract.on(filter, handleEvent);
            return () => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const blockNumber = yield this.destinationChain.provider.getBlockNumber();
                if (!blockNumber) {
                    return false;
                }
                if (startBlock === -1) {
                    startBlock = endBlock - 1000;
                }
                else {
                    startBlock = endBlock;
                }
                endBlock = blockNumber;
                const events = ((_a = (yield contract.queryFilter(filter, startBlock, endBlock))) !== null && _a !== void 0 ? _a : []).reverse();
                if (!events || !events.length) {
                    return false;
                }
                for (const event of events) {
                    if (yield handleEvent(event)) {
                        return true;
                    }
                }
                return false;
            });
        });
    }
}
exports.default = L1ToL2Watcher;
