import Base, { ChainProviders } from '../Base';
import EventEmitter from 'eventemitter3';
import HopBridge from '../HopBridge';
import { Chain, Token } from '../models';
import { TChain, TProvider, TToken } from '../types';
/**
 * @desc Event types for transaction watcher.
 */
export declare enum Event {
    Receipt = "receipt",
    SourceTxReceipt = "sourceTxReceipt",
    DestinationTxReceipt = "destinationTxReceipt"
}
export declare type WatchOptions = {
    destinationHeadBlockNumber?: number;
};
export declare type Config = {
    network: string;
    signer: TProvider;
    sourceTxHash: string;
    token: TToken;
    sourceChain: TChain;
    destinationChain: TChain;
    options?: WatchOptions;
    chainProviders?: ChainProviders;
};
declare class BaseWatcher extends Base {
    ee: EventEmitter;
    sourceTxHash: string;
    sourceTx: any;
    sourceBlock: any;
    sourceReceipt: any;
    token: Token;
    sourceChain: Chain;
    destinationChain: Chain;
    pollDelayMs: number;
    bridge: HopBridge;
    options: any;
    constructor(config: Config);
    startBase(): Promise<void>;
    poll(pollFn: any): Promise<void>;
    emitSourceTxEvent(receipt: any): Promise<void>;
    emitDestTxEvent(destTx: any, data?: any): Promise<boolean>;
}
export default BaseWatcher;
//# sourceMappingURL=BaseWatcher.d.ts.map