"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseWatcher_1 = __importStar(require("./BaseWatcher"));
const eventTopics_1 = require("../constants/eventTopics");
class L2ToL2Watcher extends BaseWatcher_1.default {
    watch() {
        this.start().catch((err) => this.ee.emit('error', err));
        return this.ee;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.startBase();
            return this.poll(yield this.pollFn());
        });
    }
    pollFn() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // here the await is intential so it's handled by the catch if it fails
                return yield this.wrapperWatcher();
            }
            catch (err) {
                console.log(err);
                return this.ammWatcher();
            }
        });
    }
    wrapperWatcher() {
        return __awaiter(this, void 0, void 0, function* () {
            const l2Dest = yield this.bridge.getL2Bridge(this.destinationChain);
            let transferHash = '';
            for (const log of this.sourceReceipt.logs) {
                if (log.topics[0] === eventTopics_1.transferSentTopic) {
                    transferHash = log.topics[1];
                    break;
                }
            }
            if (!transferHash) {
                return false;
            }
            const filter = l2Dest.filters.WithdrawalBonded();
            const handleEvent = (...args) => __awaiter(this, void 0, void 0, function* () {
                const event = args[args.length - 1];
                const decodedLog = event.decode(event.data, event.topics);
                if (transferHash === decodedLog.transferId) {
                    if (!this.sourceBlock.timestamp) {
                        return false;
                    }
                    const destTx = yield event.getTransaction();
                    if (!destTx) {
                        return false;
                    }
                    const destBlock = yield this.destinationChain.provider.getBlock(destTx.blockNumber);
                    if (!destBlock) {
                        return false;
                    }
                    const destTxReceipt = yield this.destinationChain.provider.waitForTransaction(destTx.hash);
                    this.ee.emit(BaseWatcher_1.Event.Receipt, {
                        chain: this.destinationChain,
                        receipt: destTxReceipt
                    });
                    this.ee.emit(BaseWatcher_1.Event.DestinationTxReceipt, {
                        chain: this.destinationChain,
                        receipt: destTxReceipt
                    });
                    l2Dest.off(filter, handleEvent);
                    return true;
                }
                return false;
            });
            l2Dest.on(filter, handleEvent);
            return () => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const headBlock = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.destinationHeadBlockNumber) ||
                    (yield this.destinationChain.provider.getBlockNumber());
                if (!headBlock) {
                    return false;
                }
                const tailBlock = headBlock - 10000;
                const getRecentLogs = (head) => __awaiter(this, void 0, void 0, function* () {
                    var _b;
                    if (head < tailBlock) {
                        return [];
                    }
                    const start = head - 1000;
                    const end = head;
                    const events = ((_b = (yield l2Dest.queryFilter(filter, start, end))) !== null && _b !== void 0 ? _b : []).reverse();
                    if (events.length) {
                        return events;
                    }
                    return getRecentLogs(start);
                });
                const events = yield getRecentLogs(headBlock);
                for (const event of events) {
                    if (yield handleEvent(event)) {
                        return true;
                    }
                }
                return false;
            });
        });
    }
    ammWatcher() {
        return __awaiter(this, void 0, void 0, function* () {
            // events for token swap on L2 (ie saddle convert page on UI)
            const amm = this.bridge.getAmm(this.destinationChain);
            const swap = yield amm.getSaddleSwap();
            let startBlock = -1;
            let endBlock = -1;
            const filter = swap.filters.TokenSwap();
            const handleEvent = (...args) => __awaiter(this, void 0, void 0, function* () {
                const event = args[args.length - 1];
                const decodedLog = event.decode(event.data, event.topics);
                if (this.sourceTx.from === decodedLog.buyer) {
                    if (!this.sourceBlock.timestamp) {
                        return false;
                    }
                    const destTx = yield event.getTransaction();
                    if (!destTx) {
                        return false;
                    }
                    const destBlock = yield this.destinationChain.provider.getBlock(destTx.blockNumber);
                    if (!destBlock) {
                        return false;
                    }
                    if (destBlock.timestamp - this.sourceBlock.timestamp < 500) {
                        if (yield this.emitDestTxEvent(destTx)) {
                            swap.off(filter, handleEvent);
                            return true;
                        }
                    }
                }
                return false;
            });
            swap.on(filter, handleEvent);
            return () => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const blockNumber = yield this.destinationChain.provider.getBlockNumber();
                if (!blockNumber) {
                    return false;
                }
                if (startBlock === -1) {
                    startBlock = endBlock - 100;
                }
                else {
                    startBlock = endBlock;
                }
                endBlock = blockNumber;
                const events = ((_a = (yield swap.queryFilter(filter, startBlock, endBlock))) !== null && _a !== void 0 ? _a : []).reverse();
                if (!events || !events.length) {
                    return false;
                }
                for (const event of events) {
                    if (yield handleEvent(event)) {
                        return true;
                    }
                }
                return false;
            });
        });
    }
}
exports.default = L2ToL2Watcher;
