import Base, { ChainProviders } from './Base';
import CanonicalBridge from './CanonicalBridge';
import HopBridge from './HopBridge';
import { Chain, Token } from './models';
import { Event } from './watchers/BaseWatcher';
import { TChain, TProvider, TToken } from './types';
/**
 * @desc Event watcher options
 */
declare type WatchOptions = {
    destinationHeadBlockNumber?: number;
};
/**
 * Class reprensenting Hop
 * @namespace Hop
 */
declare class Hop extends Base {
    /** Event enum */
    static Event: typeof Event;
    /** Chain class */
    static Chain: typeof Chain;
    /** Token class */
    static Token: typeof Token;
    /** Event enum */
    Event: typeof Event;
    /** Chain class */
    Chain: typeof Chain;
    /** Token class */
    Token: typeof Token;
    /**
     * @desc Instantiates Hop SDK.
     * Returns a new Hop SDK instance.
     * @param {String} network - L1 network name (e.g. 'mainnet', 'kovan', 'goerli')
     * @param {Object} signer - Ethers `Signer` for signing transactions.
     * @returns {Object} New Hop SDK instance.
     * @example
     *```js
     *import { Hop } from '@hop-protocol/sdk'
     *
     *const hop = new Hop('mainnet')
     *```
     * @example
     *```js
     *import { Hop } from '@hop-protocol/sdk'
     *import { Wallet } from 'ethers'
     *
     *const signer = new Wallet(privateKey)
     *const hop = new Hop('mainnet', signer)
     *```
     */
    constructor(network: string, signer?: TProvider, chainProviders?: ChainProviders);
    /**
     * @desc Returns a bridge set instance.
     * @param {Object} token - Token model or symbol of token of bridge to use.
     * @param {Object} sourceChain - Source chain model.
     * @param {Object} destinationChain - Destination chain model.
     * @returns {Object} A HopBridge instance.
     * @example
     *```js
     *import { Hop, Token } from '@hop-protocol/sdk'
     *
     *const hop = new Hop()
     *const bridge = hop.bridge(Token.USDC)
     *```
     */
    bridge(token: TToken): HopBridge;
    /**
     * @desc Returns a canonical bridge sdk instance.
     * @param {Object} token - Token model or symbol of token of canonical bridge to use.
     * @param {Object} chain - Chain model.
     * @returns {Object} A CanonicalBridge instance.
     * @example
     *```js
     *import { Hop, Token } from '@hop-protocol/sdk'
     *
     *const hop = new Hop()
     *const bridge = hop.canonicalBridge(Token.USDC)
     *```
     */
    canonicalBridge(token: TToken, chain?: TChain): CanonicalBridge;
    /**
     * @desc Returns hop instance with signer connected. Used for adding or changing signer.
     * @param {Object} signer - Ethers `Signer` for signing transactions.
     * @returns {Object} A new Hop SDK instance with connected Ethers Signer.
     * @example
     *```js
     *import { Hop } from '@hop-protocol/sdk'
     *import { Wallet } from 'ethers'
     *
     *const signer = new Wallet(privateKey)
     *let hop = new Hop()
     * // ...
     *hop = hop.connect(signer)
     *```
     */
    connect(signer: TProvider): Hop;
    /**
     * @desc Returns the connected signer address.
     * @returns {String} Ethers signer address.
     * @example
     *```js
     *import { Hop } from '@hop-protocol/sdk'
     *
     *const hop = new Hop()
     *const address = await hop.getSignerAddress()
     *console.log(address)
     *```
     */
    getSignerAddress(): Promise<string>;
    /**
     * @desc Returns the SDK version.
     * @returns {String} version string
     * @example
     *```js
     *import { Hop } from '@hop-protocol/sdk'
     *
     *const hop = new Hop()
     *console.log(hop.version)
     *```
     */
    get version(): string;
    /**
     * @desc Watches for Hop transaction events.
     * @param {String} txHash - Source transaction hash.
     * @param {Token} token - Token name or model.
     * @param {Object} sourceChain - Source chain name or model.
     * @param {Object} destinationChain - Destination chain name or model.
     * @example
     *```js
     *import { Hop } from '@hop-protocol/sdk'
     *
     *const hop = new Hop()
     * hop
     *   .watch(tx.hash, Token.USDC, Chain.Ethereum, Chain.xDai)
     *   .on('receipt', ({receipt, chain}) => {
     *     console.log(chain.Name, receipt)
     *   })
     *```
     */
    watch(txHash: string, token: TToken, sourceChain: TChain, destinationChain: TChain, isCanonicalTransfer?: boolean, options?: WatchOptions): any;
    watchBridge(txHash: string, token: TToken, sourceChain: TChain, destinationChain: TChain, options?: WatchOptions): any;
    watchCanonical(txHash: string, token: TToken, sourceChain: TChain, destinationChain: TChain): any;
}
export default Hop;
//# sourceMappingURL=Hop.d.ts.map