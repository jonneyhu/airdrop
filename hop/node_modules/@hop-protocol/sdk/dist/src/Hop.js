"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Base_1 = __importDefault(require("./Base"));
const CanonicalBridge_1 = __importDefault(require("./CanonicalBridge"));
const CanonicalWatcher_1 = __importDefault(require("./watchers/CanonicalWatcher"));
const HopBridge_1 = __importDefault(require("./HopBridge"));
const Watcher_1 = __importDefault(require("./watchers/Watcher"));
const version_1 = __importDefault(require("./version"));
const models_1 = require("./models");
const BaseWatcher_1 = require("./watchers/BaseWatcher");
/**
 * Class reprensenting Hop
 * @namespace Hop
 */
class Hop extends Base_1.default {
    /**
     * @desc Instantiates Hop SDK.
     * Returns a new Hop SDK instance.
     * @param {String} network - L1 network name (e.g. 'mainnet', 'kovan', 'goerli')
     * @param {Object} signer - Ethers `Signer` for signing transactions.
     * @returns {Object} New Hop SDK instance.
     * @example
     *```js
     *import { Hop } from '@hop-protocol/sdk'
     *
     *const hop = new Hop('mainnet')
     *```
     * @example
     *```js
     *import { Hop } from '@hop-protocol/sdk'
     *import { Wallet } from 'ethers'
     *
     *const signer = new Wallet(privateKey)
     *const hop = new Hop('mainnet', signer)
     *```
     */
    // eslint-disable-next-line no-useless-constructor
    constructor(network, signer, chainProviders) {
        super(network, signer, chainProviders);
        /** Event enum */
        this.Event = BaseWatcher_1.Event;
        /** Chain class */
        this.Chain = models_1.Chain;
        /** Token class */
        this.Token = models_1.Token;
    }
    /**
     * @desc Returns a bridge set instance.
     * @param {Object} token - Token model or symbol of token of bridge to use.
     * @param {Object} sourceChain - Source chain model.
     * @param {Object} destinationChain - Destination chain model.
     * @returns {Object} A HopBridge instance.
     * @example
     *```js
     *import { Hop, Token } from '@hop-protocol/sdk'
     *
     *const hop = new Hop()
     *const bridge = hop.bridge(Token.USDC)
     *```
     */
    bridge(token) {
        return new HopBridge_1.default(this.network, this.signer, token, this.chainProviders);
    }
    /**
     * @desc Returns a canonical bridge sdk instance.
     * @param {Object} token - Token model or symbol of token of canonical bridge to use.
     * @param {Object} chain - Chain model.
     * @returns {Object} A CanonicalBridge instance.
     * @example
     *```js
     *import { Hop, Token } from '@hop-protocol/sdk'
     *
     *const hop = new Hop()
     *const bridge = hop.canonicalBridge(Token.USDC)
     *```
     */
    canonicalBridge(token, chain) {
        return new CanonicalBridge_1.default(this.network, this.signer, token, chain, this.chainProviders);
    }
    /**
     * @desc Returns hop instance with signer connected. Used for adding or changing signer.
     * @param {Object} signer - Ethers `Signer` for signing transactions.
     * @returns {Object} A new Hop SDK instance with connected Ethers Signer.
     * @example
     *```js
     *import { Hop } from '@hop-protocol/sdk'
     *import { Wallet } from 'ethers'
     *
     *const signer = new Wallet(privateKey)
     *let hop = new Hop()
     * // ...
     *hop = hop.connect(signer)
     *```
     */
    connect(signer) {
        this.signer = signer;
        return new Hop(this.network, signer, this.chainProviders);
    }
    /**
     * @desc Returns the connected signer address.
     * @returns {String} Ethers signer address.
     * @example
     *```js
     *import { Hop } from '@hop-protocol/sdk'
     *
     *const hop = new Hop()
     *const address = await hop.getSignerAddress()
     *console.log(address)
     *```
     */
    getSignerAddress() {
        return this.signer.getAddress();
    }
    /**
     * @desc Returns the SDK version.
     * @returns {String} version string
     * @example
     *```js
     *import { Hop } from '@hop-protocol/sdk'
     *
     *const hop = new Hop()
     *console.log(hop.version)
     *```
     */
    get version() {
        return version_1.default;
    }
    /**
     * @desc Watches for Hop transaction events.
     * @param {String} txHash - Source transaction hash.
     * @param {Token} token - Token name or model.
     * @param {Object} sourceChain - Source chain name or model.
     * @param {Object} destinationChain - Destination chain name or model.
     * @example
     *```js
     *import { Hop } from '@hop-protocol/sdk'
     *
     *const hop = new Hop()
     * hop
     *   .watch(tx.hash, Token.USDC, Chain.Ethereum, Chain.xDai)
     *   .on('receipt', ({receipt, chain}) => {
     *     console.log(chain.Name, receipt)
     *   })
     *```
     */
    watch(txHash, token, sourceChain, destinationChain, isCanonicalTransfer = false, options = {}) {
        // TODO: detect type of transfer
        return isCanonicalTransfer
            ? this.watchCanonical(txHash, token, sourceChain, destinationChain)
            : this.watchBridge(txHash, token, sourceChain, destinationChain, options);
    }
    watchBridge(txHash, token, sourceChain, destinationChain, options = {}) {
        token = this.toTokenModel(token);
        sourceChain = this.toChainModel(sourceChain);
        destinationChain = this.toChainModel(destinationChain);
        return new Watcher_1.default({
            network: this.network,
            signer: this.signer,
            sourceTxHash: txHash,
            token: token,
            sourceChain: sourceChain,
            destinationChain: destinationChain,
            chainProviders: this.chainProviders,
            options
        }).watch();
    }
    watchCanonical(txHash, token, sourceChain, destinationChain) {
        return new CanonicalWatcher_1.default({
            network: this.network,
            signer: this.signer,
            sourceTxHash: txHash,
            token: token,
            sourceChain: sourceChain,
            destinationChain: destinationChain
        }).watch();
    }
}
/** Event enum */
Hop.Event = BaseWatcher_1.Event;
/** Chain class */
Hop.Chain = models_1.Chain;
/** Token class */
Hop.Token = models_1.Token;
exports.default = Hop;
