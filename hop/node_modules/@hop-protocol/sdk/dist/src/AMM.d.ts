import Base, { ChainProviders } from './Base';
import { BigNumber, BigNumberish } from 'ethers';
import { Chain } from './models';
import { TAmount, TChain, TProvider } from './types';
/**
 * Class reprensenting AMM contract
 * @namespace AMM
 */
declare class AMM extends Base {
    /** Chain model */
    chain: Chain;
    /** Token class instance */
    tokenSymbol: string;
    /**
     * @desc Instantiates AMM instance.
     * Returns a new Hop AMM SDK instance.
     * @param {String} network - L1 network name (e.g. 'mainnet', 'kovan', 'goerli')
     * @param {Object} token - Token model
     * @param {Object} chain - Chain model
     * @param {Object} signer - Ethers `Signer` for signing transactions.
     * @Returns {Object} Hop AMM instance
     * @example
     *```js
     *import { AMM, Token, Chain } from '@hop-protocol/sdk'
     *
     *const amm = new AMM('mainnet', Token.USDC, Chain.xDai)
     *```
     */
    constructor(network: string, tokenSymbol: string, chain?: TChain, signer?: TProvider, chainProviders?: ChainProviders);
    /**
     * @desc Returns hop AMM instance with signer connected. Used for adding or changing signer.
     * @param {Object} signer - Ethers `Signer` for signing transactions.
     * @returns {Object} Hop AMM instance with connected signer.
     * @example
     *```js
     *import { AMM } from '@hop-protocol/sdk'
     *
     *const signer = new Wallet(privateKey)
     *let amm = new AMM(...)
     * // ...
     *amm = amm.connect(signer)
     *```
     */
    connect(signer: TProvider): AMM;
    /**
     * @desc Sends transaction to add liquidity to AMM.
     * @param {Object} amount0Desired - Amount of token #0 in smallest unit
     * @param {Object} amount1Desired - Amount of token #1 in smallest unit
     * @param {number} minToMint - Minimum amount of LP token to mint in order for
     * transaction to be successful.
     * @param {Number} deadline - Order deadline in seconds
     * @returns {Object} Ethers transaction object.
     * @example
     *```js
     *import { AMM } from '@hop-protocol/sdk'
     *
     *const amm = new AMM(...)
     *const tx = await amm.addLiquidity('1000000000000000000', '1000000000000000000', '0')
     *console.log(tx.hash)
     *```
     */
    addLiquidity(amount0Desired: TAmount, amount1Desired: TAmount, minToMint?: TAmount, deadline?: BigNumberish): Promise<any>;
    /**
     * @desc Sends transaction to remove liquidity from AMM.
     * @param {Object} liqudityTokenAmount - Amount of LP tokens to burn.
     * @param {Number} amount0Min - Minimum amount of token #0 to receive in order
     * for transaction to be successful.
     * @param {Number} amount1Min - Minimum amount of token #1 to receive in order
     * for transaction to be successful.
     * transaction to be successful.
     * @param {Number} deadline - Order deadline in seconds
     * @returns {Object} Ethers transaction object.
     * @example
     *```js
     *import { AMM } from '@hop-protocol/sdk'
     *
     *const amm = new AMM(...)
     *const tx = await amm.removeLiquidity('1000000000000000000', '0', '0')
     *console.log(tx.hash)
     *```
     */
    removeLiquidity(liqudityTokenAmount: TAmount, amount0Min?: TAmount, amount1Min?: TAmount, deadline?: BigNumberish): Promise<any>;
    calculateToHToken(amount: BigNumberish): Promise<any>;
    calculateFromHToken(amount: BigNumberish): Promise<any>;
    calculateAddLiquidityMinimum(amount0: TAmount, amount1: TAmount): Promise<any>;
    calculateRemoveLiquidityMinimum(lpTokenAmount: TAmount): Promise<any>;
    /**
     * @desc Returns the address of the L2 canonical token.
     * @returns {String} address
     */
    getCanonicalTokenAddress(): Promise<any>;
    /**
     * @desc Returns the address of the L2 hop token.
     * @returns {String} address
     */
    getHopTokenAddress(): Promise<any>;
    /**
     * @desc Returns the Saddle swap contract instance for the specified chain.
     * @param {Object} chain - Chain name or model
     * @returns {Object} Ethers contract instance.
     */
    getSaddleSwap(): Promise<import("ethers").Contract>;
    getSwapFee(): Promise<number>;
    getApr(): Promise<number>;
    getVirtualPrice(): Promise<any>;
    getPriceImpact(amount0: TAmount, amount1: TAmount): Promise<BigNumber>;
    private calculateSwap;
    /**
     * @readonly
     * @desc The default deadline to use in seconds.
     * @returns {Number} Deadline in seconds
     */
    get defaultDeadlineSeconds(): number;
    /**
     * @desc Truncate any decimal places in deadline unix timestamp.
     * @param {Number} deadline - deadline timestamp
     * @returns {Number} Deadline in seconds
     */
    private normalizeDeadline;
    isHighPriceImpact(priceImpact: BigNumber): boolean;
    calculatePriceImpact(tokenInputAmount: BigNumber, // assumed to be 18d precision
    tokenOutputAmount: BigNumber, virtualPrice?: BigNumber): BigNumber;
    getReserves(): Promise<[any, any]>;
    getReservesTotal(): Promise<any>;
    calculateAmountsForLpToken(lpTokenAmount: TAmount): Promise<any>;
    calculateTotalAmountForLpToken(lpTokenAmount: TAmount): Promise<any>;
}
export default AMM;
//# sourceMappingURL=AMM.d.ts.map