"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const CoinGecko_1 = __importDefault(require("./CoinGecko"));
class PriceFeed {
    constructor() {
        this.service = new CoinGecko_1.default();
        this.cacheTimeMs = 5 * 60 * 1000;
        this.cache = {};
    }
    getPriceByTokenSymbol(tokenSymbol) {
        return __awaiter(this, void 0, void 0, function* () {
            const cached = this.cache[tokenSymbol];
            if (cached) {
                const isRecent = cached.timestamp > Date.now() - this.cacheTimeMs;
                if (isRecent) {
                    return cached.price;
                }
            }
            const price = yield this.service.getPriceByTokenSymbol(tokenSymbol);
            this.cache[tokenSymbol] = {
                timestamp: Date.now(),
                price
            };
            return price;
        });
    }
}
exports.default = PriceFeed;
