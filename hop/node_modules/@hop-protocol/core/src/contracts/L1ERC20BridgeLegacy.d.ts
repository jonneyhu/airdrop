/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface L1ERC20BridgeLegacyInterface extends ethers.utils.Interface {
  functions: {
    "CHALLENGE_AMOUNT_DIVISOR()": FunctionFragment;
    "TIME_SLOT_SIZE()": FunctionFragment;
    "addBonder(address)": FunctionFragment;
    "bondTransferRoot(bytes32,uint256,uint256)": FunctionFragment;
    "bondWithdrawal(address,uint256,bytes32,uint256)": FunctionFragment;
    "chainBalance(uint256)": FunctionFragment;
    "challengePeriod()": FunctionFragment;
    "challengeResolutionPeriod()": FunctionFragment;
    "challengeTransferBond(bytes32,uint256)": FunctionFragment;
    "confirmTransferRoot(uint256,bytes32,uint256,uint256,uint256)": FunctionFragment;
    "crossDomainMessengerWrappers(uint256)": FunctionFragment;
    "getBondForTransferAmount(uint256)": FunctionFragment;
    "getBondedWithdrawalAmount(address,bytes32)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getChallengeAmountForTransferAmount(uint256)": FunctionFragment;
    "getCredit(address)": FunctionFragment;
    "getDebitAndAdditionalDebit(address)": FunctionFragment;
    "getIsBonder(address)": FunctionFragment;
    "getRawDebit(address)": FunctionFragment;
    "getTimeSlot(uint256)": FunctionFragment;
    "getTransferId(uint256,address,uint256,bytes32,uint256,uint256,uint256)": FunctionFragment;
    "getTransferRoot(bytes32,uint256)": FunctionFragment;
    "getTransferRootId(bytes32,uint256)": FunctionFragment;
    "governance()": FunctionFragment;
    "isChainIdPaused(uint256)": FunctionFragment;
    "isTransferIdSpent(bytes32)": FunctionFragment;
    "l1CanonicalToken()": FunctionFragment;
    "minTransferRootBondDelay()": FunctionFragment;
    "removeBonder(address)": FunctionFragment;
    "rescueTransferRoot(bytes32,uint256,address)": FunctionFragment;
    "resolveChallenge(bytes32,uint256)": FunctionFragment;
    "sendToL2(uint256,address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "setChainIdDepositsPaused(uint256,bool)": FunctionFragment;
    "setChallengePeriod(uint256)": FunctionFragment;
    "setChallengeResolutionPeriod(uint256)": FunctionFragment;
    "setCrossDomainMessengerWrapper(uint256,address)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setMinTransferRootBondDelay(uint256)": FunctionFragment;
    "settleBondedWithdrawal(address,bytes32,bytes32,uint256,uint256,bytes32[],uint256)": FunctionFragment;
    "settleBondedWithdrawals(address,bytes32[],uint256)": FunctionFragment;
    "stake(address,uint256)": FunctionFragment;
    "timeSlotToAmountBonded(uint256,address)": FunctionFragment;
    "transferBonds(bytes32)": FunctionFragment;
    "transferRootCommittedAt(bytes32)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "withdraw(address,uint256,bytes32,uint256,uint256,uint256,bytes32,uint256,uint256,bytes32[],uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CHALLENGE_AMOUNT_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIME_SLOT_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addBonder", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bondTransferRoot",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bondWithdrawal",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "challengePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengeResolutionPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengeTransferBond",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransferRoot",
    values: [BigNumberish, BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "crossDomainMessengerWrappers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBondForTransferAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBondedWithdrawalAmount",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChallengeAmountForTransferAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getCredit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDebitAndAdditionalDebit",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getIsBonder", values: [string]): string;
  encodeFunctionData(functionFragment: "getRawDebit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTimeSlot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferId",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferRoot",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferRootId",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isChainIdPaused",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferIdSpent",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "l1CanonicalToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTransferRootBondDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeBonder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueTransferRoot",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveChallenge",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendToL2",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainIdDepositsPaused",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setChallengePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setChallengeResolutionPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCrossDomainMessengerWrapper",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinTransferRootBondDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleBondedWithdrawal",
    values: [
      string,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "settleBondedWithdrawals",
    values: [string, BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeSlotToAmountBonded",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBonds",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRootCommittedAt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike[],
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "CHALLENGE_AMOUNT_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIME_SLOT_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addBonder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondTransferRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeResolutionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeTransferBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransferRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossDomainMessengerWrappers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondForTransferAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondedWithdrawalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChallengeAmountForTransferAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCredit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDebitAndAdditionalDebit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsBonder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRawDebit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferRootId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isChainIdPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTransferIdSpent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1CanonicalToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTransferRootBondDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBonder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueTransferRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendToL2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setChainIdDepositsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChallengePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChallengeResolutionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCrossDomainMessengerWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinTransferRootBondDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleBondedWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleBondedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeSlotToAmountBonded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRootCommittedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BonderAdded(address)": EventFragment;
    "BonderRemoved(address)": EventFragment;
    "ChallengeResolved(bytes32,bytes32,uint256)": EventFragment;
    "MultipleWithdrawalsSettled(address,bytes32,uint256)": EventFragment;
    "Stake(address,uint256)": EventFragment;
    "TransferBondChallenged(bytes32,bytes32,uint256)": EventFragment;
    "TransferRootBonded(bytes32,uint256)": EventFragment;
    "TransferRootConfirmed(uint256,uint256,bytes32,uint256)": EventFragment;
    "TransferRootSet(bytes32,uint256)": EventFragment;
    "TransferSentToL2(uint256,address,uint256,uint256,uint256,address,uint256)": EventFragment;
    "Unstake(address,uint256)": EventFragment;
    "WithdrawalBondSettled(address,bytes32,bytes32)": EventFragment;
    "WithdrawalBonded(bytes32,uint256)": EventFragment;
    "Withdrew(bytes32,address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BonderAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BonderRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChallengeResolved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MultipleWithdrawalsSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBondChallenged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferRootBonded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferRootConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferRootSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSentToL2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalBondSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalBonded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrew"): EventFragment;
}

export type BonderAddedEvent = TypedEvent<[string] & { newBonder: string }>;

export type BonderRemovedEvent = TypedEvent<
  [string] & { previousBonder: string }
>;

export type ChallengeResolvedEvent = TypedEvent<
  [string, string, BigNumber] & {
    transferRootId: string;
    rootHash: string;
    originalAmount: BigNumber;
  }
>;

export type MultipleWithdrawalsSettledEvent = TypedEvent<
  [string, string, BigNumber] & {
    bonder: string;
    rootHash: string;
    totalBondsSettled: BigNumber;
  }
>;

export type StakeEvent = TypedEvent<
  [string, BigNumber] & { account: string; amount: BigNumber }
>;

export type TransferBondChallengedEvent = TypedEvent<
  [string, string, BigNumber] & {
    transferRootId: string;
    rootHash: string;
    originalAmount: BigNumber;
  }
>;

export type TransferRootBondedEvent = TypedEvent<
  [string, BigNumber] & { root: string; amount: BigNumber }
>;

export type TransferRootConfirmedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber] & {
    originChainId: BigNumber;
    destinationChainId: BigNumber;
    rootHash: string;
    totalAmount: BigNumber;
  }
>;

export type TransferRootSetEvent = TypedEvent<
  [string, BigNumber] & { rootHash: string; totalAmount: BigNumber }
>;

export type TransferSentToL2Event = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
    chainId: BigNumber;
    recipient: string;
    amount: BigNumber;
    amountOutMin: BigNumber;
    deadline: BigNumber;
    relayer: string;
    relayerFee: BigNumber;
  }
>;

export type UnstakeEvent = TypedEvent<
  [string, BigNumber] & { account: string; amount: BigNumber }
>;

export type WithdrawalBondSettledEvent = TypedEvent<
  [string, string, string] & {
    bonder: string;
    transferId: string;
    rootHash: string;
  }
>;

export type WithdrawalBondedEvent = TypedEvent<
  [string, BigNumber] & { transferId: string; amount: BigNumber }
>;

export type WithdrewEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    transferId: string;
    recipient: string;
    amount: BigNumber;
    transferNonce: string;
  }
>;

export class L1ERC20BridgeLegacy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: L1ERC20BridgeLegacyInterface;

  functions: {
    CHALLENGE_AMOUNT_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIME_SLOT_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addBonder(
      bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bondTransferRoot(
      rootHash: BytesLike,
      destinationChainId: BigNumberish,
      totalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bondWithdrawal(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chainBalance(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    challengePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    challengeResolutionPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    challengeTransferBond(
      rootHash: BytesLike,
      originalAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    confirmTransferRoot(
      originChainId: BigNumberish,
      rootHash: BytesLike,
      destinationChainId: BigNumberish,
      totalAmount: BigNumberish,
      rootCommittedAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    crossDomainMessengerWrappers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBondForTransferAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBondedWithdrawalAmount(
      bonder: string,
      transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getChainId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { chainId: BigNumber }>;

    getChallengeAmountForTransferAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCredit(bonder: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getDebitAndAdditionalDebit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIsBonder(
      maybeBonder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRawDebit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTimeSlot(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTransferId(
      chainId: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTransferRoot(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          total: BigNumber;
          amountWithdrawn: BigNumber;
          createdAt: BigNumber;
        }
      ]
    >;

    getTransferRootId(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    isChainIdPaused(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTransferIdSpent(
      transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    l1CanonicalToken(overrides?: CallOverrides): Promise<[string]>;

    minTransferRootBondDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeBonder(
      bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescueTransferRoot(
      rootHash: BytesLike,
      originalAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolveChallenge(
      rootHash: BytesLike,
      originalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendToL2(
      chainId: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      relayer: string,
      relayerFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChainIdDepositsPaused(
      chainId: BigNumberish,
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChallengePeriod(
      _challengePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChallengeResolutionPeriod(
      _challengeResolutionPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCrossDomainMessengerWrapper(
      chainId: BigNumberish,
      _crossDomainMessengerWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinTransferRootBondDelay(
      _minTransferRootBondDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleBondedWithdrawal(
      bonder: string,
      transferId: BytesLike,
      rootHash: BytesLike,
      transferRootTotalAmount: BigNumberish,
      transferIdTreeIndex: BigNumberish,
      siblings: BytesLike[],
      totalLeaves: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleBondedWithdrawals(
      bonder: string,
      transferIds: BytesLike[],
      totalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      bonder: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timeSlotToAmountBonded(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferBonds(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, boolean] & {
        bonder: string;
        createdAt: BigNumber;
        totalAmount: BigNumber;
        challengeStartTime: BigNumber;
        challenger: string;
        challengeResolved: boolean;
      }
    >;

    transferRootCommittedAt(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      rootHash: BytesLike,
      transferRootTotalAmount: BigNumberish,
      transferIdTreeIndex: BigNumberish,
      siblings: BytesLike[],
      totalLeaves: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CHALLENGE_AMOUNT_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  TIME_SLOT_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  addBonder(
    bonder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bondTransferRoot(
    rootHash: BytesLike,
    destinationChainId: BigNumberish,
    totalAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bondWithdrawal(
    recipient: string,
    amount: BigNumberish,
    transferNonce: BytesLike,
    bonderFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chainBalance(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  challengePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  challengeResolutionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  challengeTransferBond(
    rootHash: BytesLike,
    originalAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  confirmTransferRoot(
    originChainId: BigNumberish,
    rootHash: BytesLike,
    destinationChainId: BigNumberish,
    totalAmount: BigNumberish,
    rootCommittedAt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  crossDomainMessengerWrappers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBondForTransferAmount(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBondedWithdrawalAmount(
    bonder: string,
    transferId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getChallengeAmountForTransferAmount(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCredit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;

  getDebitAndAdditionalDebit(
    bonder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIsBonder(maybeBonder: string, overrides?: CallOverrides): Promise<boolean>;

  getRawDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;

  getTimeSlot(
    time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTransferId(
    chainId: BigNumberish,
    recipient: string,
    amount: BigNumberish,
    transferNonce: BytesLike,
    bonderFee: BigNumberish,
    amountOutMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getTransferRoot(
    rootHash: BytesLike,
    totalAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      total: BigNumber;
      amountWithdrawn: BigNumber;
      createdAt: BigNumber;
    }
  >;

  getTransferRootId(
    rootHash: BytesLike,
    totalAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  isChainIdPaused(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTransferIdSpent(
    transferId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l1CanonicalToken(overrides?: CallOverrides): Promise<string>;

  minTransferRootBondDelay(overrides?: CallOverrides): Promise<BigNumber>;

  removeBonder(
    bonder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescueTransferRoot(
    rootHash: BytesLike,
    originalAmount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolveChallenge(
    rootHash: BytesLike,
    originalAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendToL2(
    chainId: BigNumberish,
    recipient: string,
    amount: BigNumberish,
    amountOutMin: BigNumberish,
    deadline: BigNumberish,
    relayer: string,
    relayerFee: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChainIdDepositsPaused(
    chainId: BigNumberish,
    isPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChallengePeriod(
    _challengePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChallengeResolutionPeriod(
    _challengeResolutionPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCrossDomainMessengerWrapper(
    chainId: BigNumberish,
    _crossDomainMessengerWrapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _newGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinTransferRootBondDelay(
    _minTransferRootBondDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleBondedWithdrawal(
    bonder: string,
    transferId: BytesLike,
    rootHash: BytesLike,
    transferRootTotalAmount: BigNumberish,
    transferIdTreeIndex: BigNumberish,
    siblings: BytesLike[],
    totalLeaves: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleBondedWithdrawals(
    bonder: string,
    transferIds: BytesLike[],
    totalAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    bonder: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timeSlotToAmountBonded(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferBonds(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string, boolean] & {
      bonder: string;
      createdAt: BigNumber;
      totalAmount: BigNumber;
      challengeStartTime: BigNumber;
      challenger: string;
      challengeResolved: boolean;
    }
  >;

  transferRootCommittedAt(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unstake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    recipient: string,
    amount: BigNumberish,
    transferNonce: BytesLike,
    bonderFee: BigNumberish,
    amountOutMin: BigNumberish,
    deadline: BigNumberish,
    rootHash: BytesLike,
    transferRootTotalAmount: BigNumberish,
    transferIdTreeIndex: BigNumberish,
    siblings: BytesLike[],
    totalLeaves: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CHALLENGE_AMOUNT_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    TIME_SLOT_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    addBonder(bonder: string, overrides?: CallOverrides): Promise<void>;

    bondTransferRoot(
      rootHash: BytesLike,
      destinationChainId: BigNumberish,
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bondWithdrawal(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    chainBalance(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    challengePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    challengeResolutionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    challengeTransferBond(
      rootHash: BytesLike,
      originalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmTransferRoot(
      originChainId: BigNumberish,
      rootHash: BytesLike,
      destinationChainId: BigNumberish,
      totalAmount: BigNumberish,
      rootCommittedAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    crossDomainMessengerWrappers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBondForTransferAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBondedWithdrawalAmount(
      bonder: string,
      transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getChallengeAmountForTransferAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCredit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDebitAndAdditionalDebit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsBonder(
      maybeBonder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRawDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTimeSlot(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferId(
      chainId: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTransferRoot(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        total: BigNumber;
        amountWithdrawn: BigNumber;
        createdAt: BigNumber;
      }
    >;

    getTransferRootId(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    isChainIdPaused(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTransferIdSpent(
      transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l1CanonicalToken(overrides?: CallOverrides): Promise<string>;

    minTransferRootBondDelay(overrides?: CallOverrides): Promise<BigNumber>;

    removeBonder(bonder: string, overrides?: CallOverrides): Promise<void>;

    rescueTransferRoot(
      rootHash: BytesLike,
      originalAmount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveChallenge(
      rootHash: BytesLike,
      originalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendToL2(
      chainId: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      relayer: string,
      relayerFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainIdDepositsPaused(
      chainId: BigNumberish,
      isPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setChallengePeriod(
      _challengePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setChallengeResolutionPeriod(
      _challengeResolutionPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCrossDomainMessengerWrapper(
      chainId: BigNumberish,
      _crossDomainMessengerWrapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      _newGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinTransferRootBondDelay(
      _minTransferRootBondDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleBondedWithdrawal(
      bonder: string,
      transferId: BytesLike,
      rootHash: BytesLike,
      transferRootTotalAmount: BigNumberish,
      transferIdTreeIndex: BigNumberish,
      siblings: BytesLike[],
      totalLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleBondedWithdrawals(
      bonder: string,
      transferIds: BytesLike[],
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      bonder: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timeSlotToAmountBonded(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferBonds(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, boolean] & {
        bonder: string;
        createdAt: BigNumber;
        totalAmount: BigNumber;
        challengeStartTime: BigNumber;
        challenger: string;
        challengeResolved: boolean;
      }
    >;

    transferRootCommittedAt(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      rootHash: BytesLike,
      transferRootTotalAmount: BigNumberish,
      transferIdTreeIndex: BigNumberish,
      siblings: BytesLike[],
      totalLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BonderAdded(address)"(
      newBonder?: string | null
    ): TypedEventFilter<[string], { newBonder: string }>;

    BonderAdded(
      newBonder?: string | null
    ): TypedEventFilter<[string], { newBonder: string }>;

    "BonderRemoved(address)"(
      previousBonder?: string | null
    ): TypedEventFilter<[string], { previousBonder: string }>;

    BonderRemoved(
      previousBonder?: string | null
    ): TypedEventFilter<[string], { previousBonder: string }>;

    "ChallengeResolved(bytes32,bytes32,uint256)"(
      transferRootId?: BytesLike | null,
      rootHash?: BytesLike | null,
      originalAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { transferRootId: string; rootHash: string; originalAmount: BigNumber }
    >;

    ChallengeResolved(
      transferRootId?: BytesLike | null,
      rootHash?: BytesLike | null,
      originalAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { transferRootId: string; rootHash: string; originalAmount: BigNumber }
    >;

    "MultipleWithdrawalsSettled(address,bytes32,uint256)"(
      bonder?: string | null,
      rootHash?: BytesLike | null,
      totalBondsSettled?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { bonder: string; rootHash: string; totalBondsSettled: BigNumber }
    >;

    MultipleWithdrawalsSettled(
      bonder?: string | null,
      rootHash?: BytesLike | null,
      totalBondsSettled?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { bonder: string; rootHash: string; totalBondsSettled: BigNumber }
    >;

    "Stake(address,uint256)"(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    Stake(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    "TransferBondChallenged(bytes32,bytes32,uint256)"(
      transferRootId?: BytesLike | null,
      rootHash?: BytesLike | null,
      originalAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { transferRootId: string; rootHash: string; originalAmount: BigNumber }
    >;

    TransferBondChallenged(
      transferRootId?: BytesLike | null,
      rootHash?: BytesLike | null,
      originalAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { transferRootId: string; rootHash: string; originalAmount: BigNumber }
    >;

    "TransferRootBonded(bytes32,uint256)"(
      root?: BytesLike | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { root: string; amount: BigNumber }
    >;

    TransferRootBonded(
      root?: BytesLike | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { root: string; amount: BigNumber }
    >;

    "TransferRootConfirmed(uint256,uint256,bytes32,uint256)"(
      originChainId?: BigNumberish | null,
      destinationChainId?: BigNumberish | null,
      rootHash?: BytesLike | null,
      totalAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber],
      {
        originChainId: BigNumber;
        destinationChainId: BigNumber;
        rootHash: string;
        totalAmount: BigNumber;
      }
    >;

    TransferRootConfirmed(
      originChainId?: BigNumberish | null,
      destinationChainId?: BigNumberish | null,
      rootHash?: BytesLike | null,
      totalAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber],
      {
        originChainId: BigNumber;
        destinationChainId: BigNumber;
        rootHash: string;
        totalAmount: BigNumber;
      }
    >;

    "TransferRootSet(bytes32,uint256)"(
      rootHash?: BytesLike | null,
      totalAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { rootHash: string; totalAmount: BigNumber }
    >;

    TransferRootSet(
      rootHash?: BytesLike | null,
      totalAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { rootHash: string; totalAmount: BigNumber }
    >;

    "TransferSentToL2(uint256,address,uint256,uint256,uint256,address,uint256)"(
      chainId?: BigNumberish | null,
      recipient?: string | null,
      amount?: null,
      amountOutMin?: null,
      deadline?: null,
      relayer?: string | null,
      relayerFee?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, string, BigNumber],
      {
        chainId: BigNumber;
        recipient: string;
        amount: BigNumber;
        amountOutMin: BigNumber;
        deadline: BigNumber;
        relayer: string;
        relayerFee: BigNumber;
      }
    >;

    TransferSentToL2(
      chainId?: BigNumberish | null,
      recipient?: string | null,
      amount?: null,
      amountOutMin?: null,
      deadline?: null,
      relayer?: string | null,
      relayerFee?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, string, BigNumber],
      {
        chainId: BigNumber;
        recipient: string;
        amount: BigNumber;
        amountOutMin: BigNumber;
        deadline: BigNumber;
        relayer: string;
        relayerFee: BigNumber;
      }
    >;

    "Unstake(address,uint256)"(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    Unstake(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    "WithdrawalBondSettled(address,bytes32,bytes32)"(
      bonder?: string | null,
      transferId?: BytesLike | null,
      rootHash?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { bonder: string; transferId: string; rootHash: string }
    >;

    WithdrawalBondSettled(
      bonder?: string | null,
      transferId?: BytesLike | null,
      rootHash?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { bonder: string; transferId: string; rootHash: string }
    >;

    "WithdrawalBonded(bytes32,uint256)"(
      transferId?: BytesLike | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { transferId: string; amount: BigNumber }
    >;

    WithdrawalBonded(
      transferId?: BytesLike | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { transferId: string; amount: BigNumber }
    >;

    "Withdrew(bytes32,address,uint256,bytes32)"(
      transferId?: BytesLike | null,
      recipient?: string | null,
      amount?: null,
      transferNonce?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        transferId: string;
        recipient: string;
        amount: BigNumber;
        transferNonce: string;
      }
    >;

    Withdrew(
      transferId?: BytesLike | null,
      recipient?: string | null,
      amount?: null,
      transferNonce?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        transferId: string;
        recipient: string;
        amount: BigNumber;
        transferNonce: string;
      }
    >;
  };

  estimateGas: {
    CHALLENGE_AMOUNT_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    TIME_SLOT_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    addBonder(
      bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bondTransferRoot(
      rootHash: BytesLike,
      destinationChainId: BigNumberish,
      totalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bondWithdrawal(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chainBalance(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    challengePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    challengeResolutionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    challengeTransferBond(
      rootHash: BytesLike,
      originalAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    confirmTransferRoot(
      originChainId: BigNumberish,
      rootHash: BytesLike,
      destinationChainId: BigNumberish,
      totalAmount: BigNumberish,
      rootCommittedAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    crossDomainMessengerWrappers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBondForTransferAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBondedWithdrawalAmount(
      bonder: string,
      transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getChallengeAmountForTransferAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCredit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDebitAndAdditionalDebit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsBonder(
      maybeBonder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRawDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTimeSlot(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferId(
      chainId: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferRoot(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferRootId(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    isChainIdPaused(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTransferIdSpent(
      transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l1CanonicalToken(overrides?: CallOverrides): Promise<BigNumber>;

    minTransferRootBondDelay(overrides?: CallOverrides): Promise<BigNumber>;

    removeBonder(
      bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescueTransferRoot(
      rootHash: BytesLike,
      originalAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolveChallenge(
      rootHash: BytesLike,
      originalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendToL2(
      chainId: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      relayer: string,
      relayerFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChainIdDepositsPaused(
      chainId: BigNumberish,
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChallengePeriod(
      _challengePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChallengeResolutionPeriod(
      _challengeResolutionPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCrossDomainMessengerWrapper(
      chainId: BigNumberish,
      _crossDomainMessengerWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinTransferRootBondDelay(
      _minTransferRootBondDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleBondedWithdrawal(
      bonder: string,
      transferId: BytesLike,
      rootHash: BytesLike,
      transferRootTotalAmount: BigNumberish,
      transferIdTreeIndex: BigNumberish,
      siblings: BytesLike[],
      totalLeaves: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleBondedWithdrawals(
      bonder: string,
      transferIds: BytesLike[],
      totalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      bonder: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timeSlotToAmountBonded(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferBonds(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferRootCommittedAt(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      rootHash: BytesLike,
      transferRootTotalAmount: BigNumberish,
      transferIdTreeIndex: BigNumberish,
      siblings: BytesLike[],
      totalLeaves: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CHALLENGE_AMOUNT_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TIME_SLOT_SIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addBonder(
      bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bondTransferRoot(
      rootHash: BytesLike,
      destinationChainId: BigNumberish,
      totalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bondWithdrawal(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chainBalance(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    challengePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    challengeResolutionPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    challengeTransferBond(
      rootHash: BytesLike,
      originalAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    confirmTransferRoot(
      originChainId: BigNumberish,
      rootHash: BytesLike,
      destinationChainId: BigNumberish,
      totalAmount: BigNumberish,
      rootCommittedAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    crossDomainMessengerWrappers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBondForTransferAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBondedWithdrawalAmount(
      bonder: string,
      transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChallengeAmountForTransferAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCredit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebitAndAdditionalDebit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsBonder(
      maybeBonder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRawDebit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeSlot(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransferId(
      chainId: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransferRoot(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransferRootId(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isChainIdPaused(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTransferIdSpent(
      transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1CanonicalToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minTransferRootBondDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeBonder(
      bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescueTransferRoot(
      rootHash: BytesLike,
      originalAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolveChallenge(
      rootHash: BytesLike,
      originalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendToL2(
      chainId: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      relayer: string,
      relayerFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChainIdDepositsPaused(
      chainId: BigNumberish,
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChallengePeriod(
      _challengePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChallengeResolutionPeriod(
      _challengeResolutionPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCrossDomainMessengerWrapper(
      chainId: BigNumberish,
      _crossDomainMessengerWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinTransferRootBondDelay(
      _minTransferRootBondDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleBondedWithdrawal(
      bonder: string,
      transferId: BytesLike,
      rootHash: BytesLike,
      transferRootTotalAmount: BigNumberish,
      transferIdTreeIndex: BigNumberish,
      siblings: BytesLike[],
      totalLeaves: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleBondedWithdrawals(
      bonder: string,
      transferIds: BytesLike[],
      totalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      bonder: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timeSlotToAmountBonded(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferBonds(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferRootCommittedAt(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      rootHash: BytesLike,
      transferRootTotalAmount: BigNumberish,
      transferIdTreeIndex: BigNumberish,
      siblings: BytesLike[],
      totalLeaves: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
