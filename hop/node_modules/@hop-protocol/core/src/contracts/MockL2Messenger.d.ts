/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MockL2MessengerInterface extends ethers.utils.Interface {
  functions: {
    "canonicalToken()": FunctionFragment;
    "messageSender()": FunctionFragment;
    "messageSourceChainId()": FunctionFragment;
    "nextMessage()": FunctionFragment;
    "polygonTarget()": FunctionFragment;
    "receiveMessage(address,bytes,address)": FunctionFragment;
    "relayNextMessage()": FunctionFragment;
    "requireToPassMessage(address,bytes,uint256)": FunctionFragment;
    "sendMessage(address,bytes,uint32)": FunctionFragment;
    "sendTxToL1(address,bytes)": FunctionFragment;
    "setPolygonTarget(address)": FunctionFragment;
    "setTargetMessenger(address)": FunctionFragment;
    "targetMessenger()": FunctionFragment;
    "xDomainMessageSender()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "canonicalToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageSourceChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "polygonTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveMessage",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "relayNextMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requireToPassMessage",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendTxToL1",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPolygonTarget",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetMessenger",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "targetMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "xDomainMessageSender",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "canonicalToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageSourceChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "polygonTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayNextMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireToPassMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendTxToL1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPolygonTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xDomainMessageSender",
    data: BytesLike
  ): Result;

  events: {};
}

export class MockL2Messenger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockL2MessengerInterface;

  functions: {
    canonicalToken(overrides?: CallOverrides): Promise<[string]>;

    messageSender(overrides?: CallOverrides): Promise<[string]>;

    messageSourceChainId(overrides?: CallOverrides): Promise<[string]>;

    nextMessage(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        target: string;
        message: string;
        sender: string;
      }
    >;

    polygonTarget(overrides?: CallOverrides): Promise<[string]>;

    receiveMessage(
      _target: string,
      _message: BytesLike,
      _sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    relayNextMessage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requireToPassMessage(
      _target: string,
      _message: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendTxToL1(
      _destAddr: string,
      _calldataForL1: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPolygonTarget(
      _polygonTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTargetMessenger(
      _targetMessenger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    targetMessenger(overrides?: CallOverrides): Promise<[string]>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<[string]>;
  };

  canonicalToken(overrides?: CallOverrides): Promise<string>;

  messageSender(overrides?: CallOverrides): Promise<string>;

  messageSourceChainId(overrides?: CallOverrides): Promise<string>;

  nextMessage(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      target: string;
      message: string;
      sender: string;
    }
  >;

  polygonTarget(overrides?: CallOverrides): Promise<string>;

  receiveMessage(
    _target: string,
    _message: BytesLike,
    _sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  relayNextMessage(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requireToPassMessage(
    _target: string,
    _message: BytesLike,
    arg2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendMessage(
    _target: string,
    _message: BytesLike,
    arg2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendTxToL1(
    _destAddr: string,
    _calldataForL1: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPolygonTarget(
    _polygonTarget: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTargetMessenger(
    _targetMessenger: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  targetMessenger(overrides?: CallOverrides): Promise<string>;

  xDomainMessageSender(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    canonicalToken(overrides?: CallOverrides): Promise<string>;

    messageSender(overrides?: CallOverrides): Promise<string>;

    messageSourceChainId(overrides?: CallOverrides): Promise<string>;

    nextMessage(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        target: string;
        message: string;
        sender: string;
      }
    >;

    polygonTarget(overrides?: CallOverrides): Promise<string>;

    receiveMessage(
      _target: string,
      _message: BytesLike,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    relayNextMessage(overrides?: CallOverrides): Promise<void>;

    requireToPassMessage(
      _target: string,
      _message: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendTxToL1(
      _destAddr: string,
      _calldataForL1: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setPolygonTarget(
      _polygonTarget: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetMessenger(
      _targetMessenger: string,
      overrides?: CallOverrides
    ): Promise<void>;

    targetMessenger(overrides?: CallOverrides): Promise<string>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    canonicalToken(overrides?: CallOverrides): Promise<BigNumber>;

    messageSender(overrides?: CallOverrides): Promise<BigNumber>;

    messageSourceChainId(overrides?: CallOverrides): Promise<BigNumber>;

    nextMessage(overrides?: CallOverrides): Promise<BigNumber>;

    polygonTarget(overrides?: CallOverrides): Promise<BigNumber>;

    receiveMessage(
      _target: string,
      _message: BytesLike,
      _sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    relayNextMessage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requireToPassMessage(
      _target: string,
      _message: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendTxToL1(
      _destAddr: string,
      _calldataForL1: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPolygonTarget(
      _polygonTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTargetMessenger(
      _targetMessenger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    targetMessenger(overrides?: CallOverrides): Promise<BigNumber>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    canonicalToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messageSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messageSourceChainId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    polygonTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveMessage(
      _target: string,
      _message: BytesLike,
      _sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    relayNextMessage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requireToPassMessage(
      _target: string,
      _message: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendTxToL1(
      _destAddr: string,
      _calldataForL1: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPolygonTarget(
      _polygonTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTargetMessenger(
      _targetMessenger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    targetMessenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xDomainMessageSender(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
