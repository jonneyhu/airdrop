/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AccountingInterface extends ethers.utils.Interface {
  functions: {
    "addBonder(address)": FunctionFragment;
    "getCredit(address)": FunctionFragment;
    "getDebitAndAdditionalDebit(address)": FunctionFragment;
    "getIsBonder(address)": FunctionFragment;
    "getRawDebit(address)": FunctionFragment;
    "removeBonder(address)": FunctionFragment;
    "stake(address,uint256)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addBonder", values: [string]): string;
  encodeFunctionData(functionFragment: "getCredit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDebitAndAdditionalDebit",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getIsBonder", values: [string]): string;
  encodeFunctionData(functionFragment: "getRawDebit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeBonder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addBonder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCredit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDebitAndAdditionalDebit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsBonder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRawDebit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBonder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "BonderAdded(address)": EventFragment;
    "BonderRemoved(address)": EventFragment;
    "Stake(address,uint256)": EventFragment;
    "Unstake(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BonderAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BonderRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
}

export type BonderAddedEvent = TypedEvent<[string] & { newBonder: string }>;

export type BonderRemovedEvent = TypedEvent<
  [string] & { previousBonder: string }
>;

export type StakeEvent = TypedEvent<
  [string, BigNumber] & { account: string; amount: BigNumber }
>;

export type UnstakeEvent = TypedEvent<
  [string, BigNumber] & { account: string; amount: BigNumber }
>;

export class Accounting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AccountingInterface;

  functions: {
    addBonder(
      bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCredit(bonder: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getDebitAndAdditionalDebit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIsBonder(
      maybeBonder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRawDebit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeBonder(
      bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      bonder: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addBonder(
    bonder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCredit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;

  getDebitAndAdditionalDebit(
    bonder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIsBonder(maybeBonder: string, overrides?: CallOverrides): Promise<boolean>;

  getRawDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;

  removeBonder(
    bonder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    bonder: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addBonder(bonder: string, overrides?: CallOverrides): Promise<void>;

    getCredit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDebitAndAdditionalDebit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsBonder(
      maybeBonder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRawDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeBonder(bonder: string, overrides?: CallOverrides): Promise<void>;

    stake(
      bonder: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BonderAdded(address)"(
      newBonder?: string | null
    ): TypedEventFilter<[string], { newBonder: string }>;

    BonderAdded(
      newBonder?: string | null
    ): TypedEventFilter<[string], { newBonder: string }>;

    "BonderRemoved(address)"(
      previousBonder?: string | null
    ): TypedEventFilter<[string], { previousBonder: string }>;

    BonderRemoved(
      previousBonder?: string | null
    ): TypedEventFilter<[string], { previousBonder: string }>;

    "Stake(address,uint256)"(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    Stake(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    "Unstake(address,uint256)"(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    Unstake(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    addBonder(
      bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCredit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDebitAndAdditionalDebit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsBonder(
      maybeBonder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRawDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeBonder(
      bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      bonder: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBonder(
      bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCredit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebitAndAdditionalDebit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsBonder(
      maybeBonder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRawDebit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeBonder(
      bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      bonder: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
