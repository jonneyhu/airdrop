/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface L2BridgeWrapperInterface extends ethers.utils.Interface {
  functions: {
    "addBonder(address)": FunctionFragment;
    "addSupportedChainIds(uint256[])": FunctionFragment;
    "bondWithdrawal(address,uint256,bytes32,uint256)": FunctionFragment;
    "bondWithdrawalAndDistribute(address,uint256,bytes32,uint256,uint256,uint256)": FunctionFragment;
    "commitTransfers(uint256)": FunctionFragment;
    "defaultGasLimit()": FunctionFragment;
    "distribute(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getBondedWithdrawalAmount(address,bytes32)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getCredit(address)": FunctionFragment;
    "getDebitAndAdditionalDebit(address)": FunctionFragment;
    "getIsBonder(address)": FunctionFragment;
    "getNextTransferNonce()": FunctionFragment;
    "getRawDebit(address)": FunctionFragment;
    "getTransferId(uint256,address,uint256,bytes32,uint256,uint256,uint256)": FunctionFragment;
    "getTransferRoot(bytes32,uint256)": FunctionFragment;
    "getTransferRootId(bytes32,uint256)": FunctionFragment;
    "hToken()": FunctionFragment;
    "isTransferIdSpent(bytes32)": FunctionFragment;
    "l1BridgeAddress()": FunctionFragment;
    "l1Governance()": FunctionFragment;
    "l1MessengerWrapperAddress()": FunctionFragment;
    "l2CanonicalToken()": FunctionFragment;
    "lastCommitTimeForChainId(uint256)": FunctionFragment;
    "maxPendingTransfers()": FunctionFragment;
    "messenger()": FunctionFragment;
    "messengerGasLimit()": FunctionFragment;
    "minBonderBps()": FunctionFragment;
    "minBonderFeeAbsolute()": FunctionFragment;
    "minimumForceCommitDelay()": FunctionFragment;
    "pendingAmountForChainId(uint256)": FunctionFragment;
    "pendingTransferIdsForChainId(uint256,uint256)": FunctionFragment;
    "removeBonder(address)": FunctionFragment;
    "removeSupportedChainIds(uint256[])": FunctionFragment;
    "rescueTransferRoot(bytes32,uint256,address)": FunctionFragment;
    "send(uint256,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setHopBridgeTokenOwner(address)": FunctionFragment;
    "setL1BridgeAddress(address)": FunctionFragment;
    "setL1MessengerWrapperAddress(address)": FunctionFragment;
    "setMaxPendingTransfers(uint256)": FunctionFragment;
    "setMessengerGasLimit(uint256)": FunctionFragment;
    "setMinimumBonderFeeRequirements(uint256,uint256)": FunctionFragment;
    "setMinimumForceCommitDelay(uint256)": FunctionFragment;
    "setTransferRoot(bytes32,uint256)": FunctionFragment;
    "setUniswapWrapper(address)": FunctionFragment;
    "settleBondedWithdrawal(address,bytes32,bytes32,uint256,bytes32[])": FunctionFragment;
    "settleBondedWithdrawals(address,bytes32[],uint256)": FunctionFragment;
    "stake(address,uint256)": FunctionFragment;
    "supportedChainIds(uint256)": FunctionFragment;
    "transferNonceIncrementer()": FunctionFragment;
    "uniswapWrapper()": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "withdraw(address,uint256,bytes32,uint256,uint256,uint256,bytes32,uint256,bytes32[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addBonder", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addSupportedChainIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bondWithdrawal",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bondWithdrawalAndDistribute",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "commitTransfers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBondedWithdrawalAmount",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getCredit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDebitAndAdditionalDebit",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getIsBonder", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getNextTransferNonce",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRawDebit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTransferId",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferRoot",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferRootId",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "hToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTransferIdSpent",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "l1BridgeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1Governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1MessengerWrapperAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2CanonicalToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastCommitTimeForChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPendingTransfers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "messenger", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "messengerGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBonderBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBonderFeeAbsolute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumForceCommitDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAmountForChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingTransferIdsForChainId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBonder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupportedChainIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueTransferRoot",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setHopBridgeTokenOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setL1BridgeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setL1MessengerWrapperAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPendingTransfers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMessengerGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumBonderFeeRequirements",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumForceCommitDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferRoot",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapWrapper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "settleBondedWithdrawal",
    values: [string, BytesLike, BytesLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "settleBondedWithdrawals",
    values: [string, BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedChainIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferNonceIncrementer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapWrapper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addBonder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedChainIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondWithdrawalAndDistribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBondedWithdrawalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCredit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDebitAndAdditionalDebit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsBonder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextTransferNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRawDebit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferRootId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTransferIdSpent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1BridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1Governance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1MessengerWrapperAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2CanonicalToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCommitTimeForChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPendingTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messenger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "messengerGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBonderBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBonderFeeAbsolute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumForceCommitDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingAmountForChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingTransferIdsForChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBonder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportedChainIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueTransferRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHopBridgeTokenOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL1BridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL1MessengerWrapperAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPendingTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMessengerGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumBonderFeeRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumForceCommitDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleBondedWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleBondedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportedChainIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferNonceIncrementer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "MultipleWithdrawalsSettled(address,bytes32,uint256)": EventFragment;
    "Stake(uint256)": EventFragment;
    "TransferRootSet(bytes32,uint256)": EventFragment;
    "TransferSent(bytes32,address,uint256,bytes32,uint256,uint256)": EventFragment;
    "TransfersCommitted(bytes32,uint256,uint256)": EventFragment;
    "Unstake(uint256)": EventFragment;
    "WithdrawalBondSettled(address,bytes32,bytes32)": EventFragment;
    "WithdrawalBonded(bytes32,address,uint256,bytes32,uint256)": EventFragment;
    "Withdrew(bytes32,address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MultipleWithdrawalsSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferRootSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransfersCommitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalBondSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalBonded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrew"): EventFragment;
}

export type MultipleWithdrawalsSettledEvent = TypedEvent<
  [string, string, BigNumber] & {
    bonder: string;
    rootHash: string;
    totalBondsSettled: BigNumber;
  }
>;

export type StakeEvent = TypedEvent<[BigNumber] & { amount: BigNumber }>;

export type TransferRootSetEvent = TypedEvent<
  [string, BigNumber] & { rootHash: string; totalAmount: BigNumber }
>;

export type TransferSentEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber] & {
    transferId: string;
    recipient: string;
    amount: BigNumber;
    transferNonce: string;
    bonderFee: BigNumber;
    index: BigNumber;
  }
>;

export type TransfersCommittedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    rootHash: string;
    totalAmount: BigNumber;
    rootCommittedAt: BigNumber;
  }
>;

export type UnstakeEvent = TypedEvent<[BigNumber] & { amount: BigNumber }>;

export type WithdrawalBondSettledEvent = TypedEvent<
  [string, string, string] & {
    bonder: string;
    transferId: string;
    rootHash: string;
  }
>;

export type WithdrawalBondedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber] & {
    transferId: string;
    recipient: string;
    amount: BigNumber;
    transferNonce: string;
    bonderFee: BigNumber;
  }
>;

export type WithdrewEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    transferId: string;
    recipient: string;
    amount: BigNumber;
    transferNonce: string;
  }
>;

export class L2BridgeWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: L2BridgeWrapperInterface;

  functions: {
    addBonder(
      bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSupportedChainIds(
      chainIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bondWithdrawal(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bondWithdrawalAndDistribute(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitTransfers(
      destinationChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultGasLimit(overrides?: CallOverrides): Promise<[number]>;

    distribute(
      recipient: string,
      amount: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      relayerFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBondedWithdrawalAmount(
      bonder: string,
      transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getChainId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { chainId: BigNumber }>;

    getCredit(bonder: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getDebitAndAdditionalDebit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIsBonder(
      maybeBonder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getNextTransferNonce(overrides?: CallOverrides): Promise<[string]>;

    getRawDebit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTransferId(
      chainId: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTransferRoot(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          total: BigNumber;
          amountWithdrawn: BigNumber;
          createdAt: BigNumber;
        }
      ]
    >;

    getTransferRootId(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hToken(overrides?: CallOverrides): Promise<[string]>;

    isTransferIdSpent(
      transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    l1BridgeAddress(overrides?: CallOverrides): Promise<[string]>;

    l1Governance(overrides?: CallOverrides): Promise<[string]>;

    l1MessengerWrapperAddress(overrides?: CallOverrides): Promise<[string]>;

    l2CanonicalToken(overrides?: CallOverrides): Promise<[string]>;

    lastCommitTimeForChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxPendingTransfers(overrides?: CallOverrides): Promise<[BigNumber]>;

    messenger(overrides?: CallOverrides): Promise<[string]>;

    messengerGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBonderBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBonderFeeAbsolute(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumForceCommitDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingAmountForChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingTransferIdsForChainId(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeBonder(
      bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSupportedChainIds(
      chainIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescueTransferRoot(
      rootHash: BytesLike,
      originalAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    send(
      chainId: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHopBridgeTokenOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setL1BridgeAddress(
      _l1BridgeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setL1MessengerWrapperAddress(
      _l1MessengerWrapperAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPendingTransfers(
      _maxPendingTransfers: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMessengerGasLimit(
      _messengerGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumBonderFeeRequirements(
      _minBonderBps: BigNumberish,
      _minBonderFeeAbsolute: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumForceCommitDelay(
      _minimumForceCommitDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransferRoot(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUniswapWrapper(
      _uniswapWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleBondedWithdrawal(
      bonder: string,
      transferId: BytesLike,
      rootHash: BytesLike,
      transferRootTotalAmount: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleBondedWithdrawals(
      bonder: string,
      transferIds: BytesLike[],
      totalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      bonder: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportedChainIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferNonceIncrementer(overrides?: CallOverrides): Promise<[BigNumber]>;

    uniswapWrapper(overrides?: CallOverrides): Promise<[string]>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      rootHash: BytesLike,
      transferRootTotalAmount: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addBonder(
    bonder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSupportedChainIds(
    chainIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bondWithdrawal(
    recipient: string,
    amount: BigNumberish,
    transferNonce: BytesLike,
    bonderFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bondWithdrawalAndDistribute(
    recipient: string,
    amount: BigNumberish,
    transferNonce: BytesLike,
    bonderFee: BigNumberish,
    amountOutMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitTransfers(
    destinationChainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultGasLimit(overrides?: CallOverrides): Promise<number>;

  distribute(
    recipient: string,
    amount: BigNumberish,
    amountOutMin: BigNumberish,
    deadline: BigNumberish,
    relayerFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBondedWithdrawalAmount(
    bonder: string,
    transferId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getCredit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;

  getDebitAndAdditionalDebit(
    bonder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIsBonder(maybeBonder: string, overrides?: CallOverrides): Promise<boolean>;

  getNextTransferNonce(overrides?: CallOverrides): Promise<string>;

  getRawDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;

  getTransferId(
    chainId: BigNumberish,
    recipient: string,
    amount: BigNumberish,
    transferNonce: BytesLike,
    bonderFee: BigNumberish,
    amountOutMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getTransferRoot(
    rootHash: BytesLike,
    totalAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      total: BigNumber;
      amountWithdrawn: BigNumber;
      createdAt: BigNumber;
    }
  >;

  getTransferRootId(
    rootHash: BytesLike,
    totalAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  hToken(overrides?: CallOverrides): Promise<string>;

  isTransferIdSpent(
    transferId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l1BridgeAddress(overrides?: CallOverrides): Promise<string>;

  l1Governance(overrides?: CallOverrides): Promise<string>;

  l1MessengerWrapperAddress(overrides?: CallOverrides): Promise<string>;

  l2CanonicalToken(overrides?: CallOverrides): Promise<string>;

  lastCommitTimeForChainId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxPendingTransfers(overrides?: CallOverrides): Promise<BigNumber>;

  messenger(overrides?: CallOverrides): Promise<string>;

  messengerGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  minBonderBps(overrides?: CallOverrides): Promise<BigNumber>;

  minBonderFeeAbsolute(overrides?: CallOverrides): Promise<BigNumber>;

  minimumForceCommitDelay(overrides?: CallOverrides): Promise<BigNumber>;

  pendingAmountForChainId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingTransferIdsForChainId(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  removeBonder(
    bonder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSupportedChainIds(
    chainIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescueTransferRoot(
    rootHash: BytesLike,
    originalAmount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  send(
    chainId: BigNumberish,
    recipient: string,
    amount: BigNumberish,
    bonderFee: BigNumberish,
    amountOutMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHopBridgeTokenOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setL1BridgeAddress(
    _l1BridgeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setL1MessengerWrapperAddress(
    _l1MessengerWrapperAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPendingTransfers(
    _maxPendingTransfers: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMessengerGasLimit(
    _messengerGasLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumBonderFeeRequirements(
    _minBonderBps: BigNumberish,
    _minBonderFeeAbsolute: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumForceCommitDelay(
    _minimumForceCommitDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransferRoot(
    rootHash: BytesLike,
    totalAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUniswapWrapper(
    _uniswapWrapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleBondedWithdrawal(
    bonder: string,
    transferId: BytesLike,
    rootHash: BytesLike,
    transferRootTotalAmount: BigNumberish,
    proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleBondedWithdrawals(
    bonder: string,
    transferIds: BytesLike[],
    totalAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    bonder: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportedChainIds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferNonceIncrementer(overrides?: CallOverrides): Promise<BigNumber>;

  uniswapWrapper(overrides?: CallOverrides): Promise<string>;

  unstake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    recipient: string,
    amount: BigNumberish,
    transferNonce: BytesLike,
    bonderFee: BigNumberish,
    amountOutMin: BigNumberish,
    deadline: BigNumberish,
    rootHash: BytesLike,
    transferRootTotalAmount: BigNumberish,
    proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addBonder(bonder: string, overrides?: CallOverrides): Promise<void>;

    addSupportedChainIds(
      chainIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    bondWithdrawal(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bondWithdrawalAndDistribute(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    commitTransfers(
      destinationChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultGasLimit(overrides?: CallOverrides): Promise<number>;

    distribute(
      recipient: string,
      amount: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      relayerFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBondedWithdrawalAmount(
      bonder: string,
      transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getCredit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDebitAndAdditionalDebit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsBonder(
      maybeBonder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getNextTransferNonce(overrides?: CallOverrides): Promise<string>;

    getRawDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTransferId(
      chainId: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTransferRoot(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        total: BigNumber;
        amountWithdrawn: BigNumber;
        createdAt: BigNumber;
      }
    >;

    getTransferRootId(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    hToken(overrides?: CallOverrides): Promise<string>;

    isTransferIdSpent(
      transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l1BridgeAddress(overrides?: CallOverrides): Promise<string>;

    l1Governance(overrides?: CallOverrides): Promise<string>;

    l1MessengerWrapperAddress(overrides?: CallOverrides): Promise<string>;

    l2CanonicalToken(overrides?: CallOverrides): Promise<string>;

    lastCommitTimeForChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPendingTransfers(overrides?: CallOverrides): Promise<BigNumber>;

    messenger(overrides?: CallOverrides): Promise<string>;

    messengerGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    minBonderBps(overrides?: CallOverrides): Promise<BigNumber>;

    minBonderFeeAbsolute(overrides?: CallOverrides): Promise<BigNumber>;

    minimumForceCommitDelay(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAmountForChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingTransferIdsForChainId(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    removeBonder(bonder: string, overrides?: CallOverrides): Promise<void>;

    removeSupportedChainIds(
      chainIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    rescueTransferRoot(
      rootHash: BytesLike,
      originalAmount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    send(
      chainId: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHopBridgeTokenOwner(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setL1BridgeAddress(
      _l1BridgeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setL1MessengerWrapperAddress(
      _l1MessengerWrapperAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPendingTransfers(
      _maxPendingTransfers: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMessengerGasLimit(
      _messengerGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumBonderFeeRequirements(
      _minBonderBps: BigNumberish,
      _minBonderFeeAbsolute: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumForceCommitDelay(
      _minimumForceCommitDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferRoot(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUniswapWrapper(
      _uniswapWrapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settleBondedWithdrawal(
      bonder: string,
      transferId: BytesLike,
      rootHash: BytesLike,
      transferRootTotalAmount: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    settleBondedWithdrawals(
      bonder: string,
      transferIds: BytesLike[],
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      bonder: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedChainIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferNonceIncrementer(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapWrapper(overrides?: CallOverrides): Promise<string>;

    unstake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      rootHash: BytesLike,
      transferRootTotalAmount: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MultipleWithdrawalsSettled(address,bytes32,uint256)"(
      bonder?: null,
      rootHash?: null,
      totalBondsSettled?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { bonder: string; rootHash: string; totalBondsSettled: BigNumber }
    >;

    MultipleWithdrawalsSettled(
      bonder?: null,
      rootHash?: null,
      totalBondsSettled?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { bonder: string; rootHash: string; totalBondsSettled: BigNumber }
    >;

    "Stake(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    Stake(amount?: null): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "TransferRootSet(bytes32,uint256)"(
      rootHash?: null,
      totalAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { rootHash: string; totalAmount: BigNumber }
    >;

    TransferRootSet(
      rootHash?: null,
      totalAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { rootHash: string; totalAmount: BigNumber }
    >;

    "TransferSent(bytes32,address,uint256,bytes32,uint256,uint256)"(
      transferId?: BytesLike | null,
      recipient?: string | null,
      amount?: null,
      transferNonce?: BytesLike | null,
      bonderFee?: null,
      index?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber, BigNumber],
      {
        transferId: string;
        recipient: string;
        amount: BigNumber;
        transferNonce: string;
        bonderFee: BigNumber;
        index: BigNumber;
      }
    >;

    TransferSent(
      transferId?: BytesLike | null,
      recipient?: string | null,
      amount?: null,
      transferNonce?: BytesLike | null,
      bonderFee?: null,
      index?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber, BigNumber],
      {
        transferId: string;
        recipient: string;
        amount: BigNumber;
        transferNonce: string;
        bonderFee: BigNumber;
        index: BigNumber;
      }
    >;

    "TransfersCommitted(bytes32,uint256,uint256)"(
      rootHash?: BytesLike | null,
      totalAmount?: null,
      rootCommittedAt?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { rootHash: string; totalAmount: BigNumber; rootCommittedAt: BigNumber }
    >;

    TransfersCommitted(
      rootHash?: BytesLike | null,
      totalAmount?: null,
      rootCommittedAt?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { rootHash: string; totalAmount: BigNumber; rootCommittedAt: BigNumber }
    >;

    "Unstake(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    Unstake(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "WithdrawalBondSettled(address,bytes32,bytes32)"(
      bonder?: null,
      transferId?: null,
      rootHash?: null
    ): TypedEventFilter<
      [string, string, string],
      { bonder: string; transferId: string; rootHash: string }
    >;

    WithdrawalBondSettled(
      bonder?: null,
      transferId?: null,
      rootHash?: null
    ): TypedEventFilter<
      [string, string, string],
      { bonder: string; transferId: string; rootHash: string }
    >;

    "WithdrawalBonded(bytes32,address,uint256,bytes32,uint256)"(
      transferId?: BytesLike | null,
      recipient?: string | null,
      amount?: null,
      transferNonce?: null,
      bonderFee?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        transferId: string;
        recipient: string;
        amount: BigNumber;
        transferNonce: string;
        bonderFee: BigNumber;
      }
    >;

    WithdrawalBonded(
      transferId?: BytesLike | null,
      recipient?: string | null,
      amount?: null,
      transferNonce?: null,
      bonderFee?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        transferId: string;
        recipient: string;
        amount: BigNumber;
        transferNonce: string;
        bonderFee: BigNumber;
      }
    >;

    "Withdrew(bytes32,address,uint256,bytes32)"(
      transferId?: BytesLike | null,
      recipient?: string | null,
      amount?: null,
      transferNonce?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        transferId: string;
        recipient: string;
        amount: BigNumber;
        transferNonce: string;
      }
    >;

    Withdrew(
      transferId?: BytesLike | null,
      recipient?: string | null,
      amount?: null,
      transferNonce?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        transferId: string;
        recipient: string;
        amount: BigNumber;
        transferNonce: string;
      }
    >;
  };

  estimateGas: {
    addBonder(
      bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSupportedChainIds(
      chainIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bondWithdrawal(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bondWithdrawalAndDistribute(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitTransfers(
      destinationChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(
      recipient: string,
      amount: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      relayerFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBondedWithdrawalAmount(
      bonder: string,
      transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getCredit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDebitAndAdditionalDebit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsBonder(
      maybeBonder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextTransferNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getRawDebit(bonder: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTransferId(
      chainId: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferRoot(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferRootId(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hToken(overrides?: CallOverrides): Promise<BigNumber>;

    isTransferIdSpent(
      transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l1BridgeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    l1Governance(overrides?: CallOverrides): Promise<BigNumber>;

    l1MessengerWrapperAddress(overrides?: CallOverrides): Promise<BigNumber>;

    l2CanonicalToken(overrides?: CallOverrides): Promise<BigNumber>;

    lastCommitTimeForChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPendingTransfers(overrides?: CallOverrides): Promise<BigNumber>;

    messenger(overrides?: CallOverrides): Promise<BigNumber>;

    messengerGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    minBonderBps(overrides?: CallOverrides): Promise<BigNumber>;

    minBonderFeeAbsolute(overrides?: CallOverrides): Promise<BigNumber>;

    minimumForceCommitDelay(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAmountForChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingTransferIdsForChainId(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeBonder(
      bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSupportedChainIds(
      chainIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescueTransferRoot(
      rootHash: BytesLike,
      originalAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    send(
      chainId: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHopBridgeTokenOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setL1BridgeAddress(
      _l1BridgeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setL1MessengerWrapperAddress(
      _l1MessengerWrapperAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPendingTransfers(
      _maxPendingTransfers: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMessengerGasLimit(
      _messengerGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumBonderFeeRequirements(
      _minBonderBps: BigNumberish,
      _minBonderFeeAbsolute: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumForceCommitDelay(
      _minimumForceCommitDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransferRoot(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUniswapWrapper(
      _uniswapWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleBondedWithdrawal(
      bonder: string,
      transferId: BytesLike,
      rootHash: BytesLike,
      transferRootTotalAmount: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleBondedWithdrawals(
      bonder: string,
      transferIds: BytesLike[],
      totalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      bonder: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportedChainIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferNonceIncrementer(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      rootHash: BytesLike,
      transferRootTotalAmount: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBonder(
      bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSupportedChainIds(
      chainIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bondWithdrawal(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bondWithdrawalAndDistribute(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitTransfers(
      destinationChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distribute(
      recipient: string,
      amount: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      relayerFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBondedWithdrawalAmount(
      bonder: string,
      transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCredit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebitAndAdditionalDebit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsBonder(
      maybeBonder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextTransferNonce(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRawDebit(
      bonder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransferId(
      chainId: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransferRoot(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransferRootId(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTransferIdSpent(
      transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1BridgeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1Governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1MessengerWrapperAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2CanonicalToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastCommitTimeForChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPendingTransfers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messengerGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBonderBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBonderFeeAbsolute(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumForceCommitDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingAmountForChainId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingTransferIdsForChainId(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeBonder(
      bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSupportedChainIds(
      chainIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescueTransferRoot(
      rootHash: BytesLike,
      originalAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    send(
      chainId: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHopBridgeTokenOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setL1BridgeAddress(
      _l1BridgeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setL1MessengerWrapperAddress(
      _l1MessengerWrapperAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPendingTransfers(
      _maxPendingTransfers: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMessengerGasLimit(
      _messengerGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumBonderFeeRequirements(
      _minBonderBps: BigNumberish,
      _minBonderFeeAbsolute: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumForceCommitDelay(
      _minimumForceCommitDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransferRoot(
      rootHash: BytesLike,
      totalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUniswapWrapper(
      _uniswapWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleBondedWithdrawal(
      bonder: string,
      transferId: BytesLike,
      rootHash: BytesLike,
      transferRootTotalAmount: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleBondedWithdrawals(
      bonder: string,
      transferIds: BytesLike[],
      totalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      bonder: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportedChainIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferNonceIncrementer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapWrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      transferNonce: BytesLike,
      bonderFee: BigNumberish,
      amountOutMin: BigNumberish,
      deadline: BigNumberish,
      rootHash: BytesLike,
      transferRootTotalAmount: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
