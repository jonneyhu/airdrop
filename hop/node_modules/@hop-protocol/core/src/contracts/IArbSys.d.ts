/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IArbSysInterface extends ethers.utils.Interface {
  functions: {
    "arbOSVersion()": FunctionFragment;
    "getTransactionCount(address)": FunctionFragment;
    "sendTxToL1(address,bytes)": FunctionFragment;
    "withdrawEth(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "arbOSVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendTxToL1",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "withdrawEth", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "arbOSVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendTxToL1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEth",
    data: BytesLike
  ): Result;

  events: {
    "ERC20Withdrawal(address,address,uint256)": EventFragment;
    "ERC721Withdrawal(address,address,uint256)": EventFragment;
    "EthWithdrawal(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC20Withdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721Withdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthWithdrawal"): EventFragment;
}

export type ERC20WithdrawalEvent = TypedEvent<
  [string, string, BigNumber] & {
    destAddr: string;
    tokenAddr: string;
    amount: BigNumber;
  }
>;

export type ERC721WithdrawalEvent = TypedEvent<
  [string, string, BigNumber] & {
    destAddr: string;
    tokenAddr: string;
    id: BigNumber;
  }
>;

export type EthWithdrawalEvent = TypedEvent<
  [string, BigNumber] & { destAddr: string; amount: BigNumber }
>;

export class IArbSys extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IArbSysInterface;

  functions: {
    arbOSVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTransactionCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sendTxToL1(
      destAddr: string,
      calldataForL1: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEth(
      dest: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  arbOSVersion(overrides?: CallOverrides): Promise<BigNumber>;

  getTransactionCount(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sendTxToL1(
    destAddr: string,
    calldataForL1: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEth(
    dest: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    arbOSVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendTxToL1(
      destAddr: string,
      calldataForL1: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEth(dest: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ERC20Withdrawal(address,address,uint256)"(
      destAddr?: string | null,
      tokenAddr?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { destAddr: string; tokenAddr: string; amount: BigNumber }
    >;

    ERC20Withdrawal(
      destAddr?: string | null,
      tokenAddr?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { destAddr: string; tokenAddr: string; amount: BigNumber }
    >;

    "ERC721Withdrawal(address,address,uint256)"(
      destAddr?: string | null,
      tokenAddr?: string | null,
      id?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { destAddr: string; tokenAddr: string; id: BigNumber }
    >;

    ERC721Withdrawal(
      destAddr?: string | null,
      tokenAddr?: string | null,
      id?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { destAddr: string; tokenAddr: string; id: BigNumber }
    >;

    "EthWithdrawal(address,uint256)"(
      destAddr?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { destAddr: string; amount: BigNumber }
    >;

    EthWithdrawal(
      destAddr?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { destAddr: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    arbOSVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendTxToL1(
      destAddr: string,
      calldataForL1: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEth(
      dest: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    arbOSVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTransactionCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendTxToL1(
      destAddr: string,
      calldataForL1: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEth(
      dest: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
