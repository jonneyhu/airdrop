/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IGlobalInboxInterface extends ethers.utils.Interface {
  functions: {
    "deployL2ContractPair(address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "getInbox(address)": FunctionFragment;
    "sendInitializationMessage(bytes)": FunctionFragment;
    "sendL2Message(address,bytes)": FunctionFragment;
    "sendMessages(bytes,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deployL2ContractPair",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getInbox", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sendInitializationMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendL2Message",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessages",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployL2ContractPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getInbox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendInitializationMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendL2Message",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessages",
    data: BytesLike
  ): Result;

  events: {
    "BuddyContractDeployed(address,bytes)": EventFragment;
    "BuddyContractPair(address,address)": EventFragment;
    "MessageDelivered(address,uint8,address,uint256,bytes)": EventFragment;
    "MessageDeliveredFromOrigin(address,uint8,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuddyContractDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuddyContractPair"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageDelivered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageDeliveredFromOrigin"): EventFragment;
}

export type BuddyContractDeployedEvent = TypedEvent<
  [string, string] & { sender: string; data: string }
>;

export type BuddyContractPairEvent = TypedEvent<
  [string, string] & { sender: string; data: string }
>;

export type MessageDeliveredEvent = TypedEvent<
  [string, number, string, BigNumber, string] & {
    chain: string;
    kind: number;
    sender: string;
    inboxSeqNum: BigNumber;
    data: string;
  }
>;

export type MessageDeliveredFromOriginEvent = TypedEvent<
  [string, number, string, BigNumber] & {
    chain: string;
    kind: number;
    sender: string;
    inboxSeqNum: BigNumber;
  }
>;

export class IGlobalInbox extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IGlobalInboxInterface;

  functions: {
    deployL2ContractPair(
      chain: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      payment: BigNumberish,
      contractData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInbox(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    sendInitializationMessage(
      messageData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendL2Message(
      chain: string,
      messageData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendMessages(
      _messages: BytesLike,
      initialMaxSendCount: BigNumberish,
      finalMaxSendCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deployL2ContractPair(
    chain: string,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    payment: BigNumberish,
    contractData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInbox(
    account: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  sendInitializationMessage(
    messageData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendL2Message(
    chain: string,
    messageData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendMessages(
    _messages: BytesLike,
    initialMaxSendCount: BigNumberish,
    finalMaxSendCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deployL2ContractPair(
      chain: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      payment: BigNumberish,
      contractData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getInbox(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    sendInitializationMessage(
      messageData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sendL2Message(
      chain: string,
      messageData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessages(
      _messages: BytesLike,
      initialMaxSendCount: BigNumberish,
      finalMaxSendCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BuddyContractDeployed(address,bytes)"(
      sender?: string | null,
      data?: null
    ): TypedEventFilter<[string, string], { sender: string; data: string }>;

    BuddyContractDeployed(
      sender?: string | null,
      data?: null
    ): TypedEventFilter<[string, string], { sender: string; data: string }>;

    "BuddyContractPair(address,address)"(
      sender?: string | null,
      data?: null
    ): TypedEventFilter<[string, string], { sender: string; data: string }>;

    BuddyContractPair(
      sender?: string | null,
      data?: null
    ): TypedEventFilter<[string, string], { sender: string; data: string }>;

    "MessageDelivered(address,uint8,address,uint256,bytes)"(
      chain?: string | null,
      kind?: BigNumberish | null,
      sender?: string | null,
      inboxSeqNum?: null,
      data?: null
    ): TypedEventFilter<
      [string, number, string, BigNumber, string],
      {
        chain: string;
        kind: number;
        sender: string;
        inboxSeqNum: BigNumber;
        data: string;
      }
    >;

    MessageDelivered(
      chain?: string | null,
      kind?: BigNumberish | null,
      sender?: string | null,
      inboxSeqNum?: null,
      data?: null
    ): TypedEventFilter<
      [string, number, string, BigNumber, string],
      {
        chain: string;
        kind: number;
        sender: string;
        inboxSeqNum: BigNumber;
        data: string;
      }
    >;

    "MessageDeliveredFromOrigin(address,uint8,address,uint256)"(
      chain?: string | null,
      kind?: BigNumberish | null,
      sender?: string | null,
      inboxSeqNum?: null
    ): TypedEventFilter<
      [string, number, string, BigNumber],
      { chain: string; kind: number; sender: string; inboxSeqNum: BigNumber }
    >;

    MessageDeliveredFromOrigin(
      chain?: string | null,
      kind?: BigNumberish | null,
      sender?: string | null,
      inboxSeqNum?: null
    ): TypedEventFilter<
      [string, number, string, BigNumber],
      { chain: string; kind: number; sender: string; inboxSeqNum: BigNumber }
    >;
  };

  estimateGas: {
    deployL2ContractPair(
      chain: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      payment: BigNumberish,
      contractData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInbox(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    sendInitializationMessage(
      messageData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendL2Message(
      chain: string,
      messageData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendMessages(
      _messages: BytesLike,
      initialMaxSendCount: BigNumberish,
      finalMaxSendCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployL2ContractPair(
      chain: string,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      payment: BigNumberish,
      contractData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInbox(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendInitializationMessage(
      messageData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendL2Message(
      chain: string,
      messageData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendMessages(
      _messages: BytesLike,
      initialMaxSendCount: BigNumberish,
      finalMaxSendCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
